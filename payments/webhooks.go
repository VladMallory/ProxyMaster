package payments

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"

	"bot/common"
	paymentCommon "bot/payments/common"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// WebhookHandlers —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
type WebhookHandlers struct {
	paymentManager *PaymentManager
}

// NewWebhookHandlers —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–µ–±-—Ö—É–∫–æ–≤
func NewWebhookHandlers(paymentManager *PaymentManager) *WebhookHandlers {
	return &WebhookHandlers{
		paymentManager: paymentManager,
	}
}

// HandleYooKassaWebhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±-—Ö—É–∫–∏ –æ—Ç –Æ–ö–∞—Å—Å—ã
func (wh *WebhookHandlers) HandleYooKassaWebhook(w http.ResponseWriter, r *http.Request) {
	log.Printf("WEBHOOK_YOOKASSA: –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –Æ–ö–∞—Å—Å—ã")
	log.Printf("WEBHOOK_YOOKASSA: Method: %s, URL: %s, Headers: %+v", r.Method, r.URL.String(), r.Header)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
	if r.Method != http.MethodPost {
		log.Printf("WEBHOOK_YOOKASSA: –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞: %s", r.Method)
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	body, err := io.ReadAll(r.Body)
	if err != nil {
		log.Printf("WEBHOOK_YOOKASSA: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		http.Error(w, "Bad request", http.StatusBadRequest)
		return
	}
	defer r.Body.Close()

	log.Printf("WEBHOOK_YOOKASSA: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª–∏–Ω–∞: %d –±–∞–π—Ç)", len(body))
	log.Printf("WEBHOOK_YOOKASSA: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: %s", string(body))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ API –≤–∫–ª—é—á–µ–Ω—ã
	if !common.YUKASSA_API_PAYMENTS_ENABLED {
		log.Printf("WEBHOOK_YOOKASSA: –ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ API –Æ–ö–∞—Å—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
		wh.sendSuccessResponse(w)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
	paymentInfo, err := wh.paymentManager.ProcessWebhook(paymentCommon.PaymentMethodAPI, body)
	if err != nil {
		log.Printf("WEBHOOK_YOOKASSA: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: %v", err)
		http.Error(w, "Webhook processing error", http.StatusBadRequest)
		return
	}

	if paymentInfo == nil {
		log.Printf("WEBHOOK_YOOKASSA: Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
		wh.sendSuccessResponse(w)
		return
	}

	log.Printf("WEBHOOK_YOOKASSA: –û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂ ID=%s, UserID=%d, Status=%s, Amount=%.2f",
		paymentInfo.ID, paymentInfo.UserID, paymentInfo.Status, paymentInfo.Amount)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
	if paymentInfo.Status == paymentCommon.PaymentStatusSucceeded && paymentInfo.UserID > 0 {
		err = wh.sendPaymentNotificationToUser(paymentInfo)
		if err != nil {
			log.Printf("WEBHOOK_YOOKASSA: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %v", err)
			// –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
		err = wh.sendPaymentNotificationToAdmin(paymentInfo)
		if err != nil {
			log.Printf("WEBHOOK_YOOKASSA: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: %v", err)
		}
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	wh.sendSuccessResponse(w)
	log.Printf("WEBHOOK_YOOKASSA: Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
}

// sendPaymentNotificationToUser –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (wh *WebhookHandlers) sendPaymentNotificationToUser(paymentInfo *paymentCommon.PaymentInfo) error {
	user, err := common.GetUserByTelegramID(paymentInfo.UserID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
	var text string
	var keyboard *tgbotapi.InlineKeyboardMarkup

	switch paymentInfo.Status {
	case paymentCommon.PaymentStatusSucceeded:
		text = fmt.Sprintf("‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"+
			"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: %s\n"+
			"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %.2f‚ÇΩ\n"+
			"üè¶ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: %s\n"+
			"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: %s\n\n"+
			"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.",
			paymentCommon.FormatAmount(paymentInfo.Amount), user.Balance,
			paymentCommon.GetMethodDescription(paymentInfo.Method), paymentInfo.ID)

		keyboardButtons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "main"),
			),
		)
		keyboard = &keyboardButtons

	case paymentCommon.PaymentStatusCanceled:
		text = fmt.Sprintf("‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"+
			"üí∞ –°—É–º–º–∞: %s\n"+
			"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: %s\n\n"+
			"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
			paymentCommon.FormatAmount(paymentInfo.Amount), paymentInfo.ID)

		keyboardButtons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "topup"),
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "main"),
			),
		)
		keyboard = &keyboardButtons

	case paymentCommon.PaymentStatusFailed:
		text = fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"+
			"üí∞ –°—É–º–º–∞: %s\n"+
			"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: %s\n\n"+
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
			paymentCommon.FormatAmount(paymentInfo.Amount), paymentInfo.ID)

		keyboardButtons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "topup"),
				tgbotapi.NewInlineKeyboardButtonURL("‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", common.SUPPORT_LINK),
			),
		)
		keyboard = &keyboardButtons

	default:
		// –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		return nil
	}

	msg := tgbotapi.NewMessage(paymentInfo.UserID, text)
	msg.ParseMode = "HTML"
	if keyboard != nil {
		msg.ReplyMarkup = keyboard
	}

	_, err = common.GlobalBot.Send(msg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %v", err)
	}

	return nil
}

// sendPaymentNotificationToAdmin –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
func (wh *WebhookHandlers) sendPaymentNotificationToAdmin(paymentInfo *paymentCommon.PaymentInfo) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !common.ADMIN_NOTIFICATIONS_ENABLED || !common.ADMIN_BALANCE_TOPUP_ENABLED {
		return nil
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
	if paymentInfo.Status != paymentCommon.PaymentStatusSucceeded {
		return nil
	}

	user, err := common.GetUserByTelegramID(paymentInfo.UserID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
	}

	notificationText := fmt.Sprintf(
		"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"+
			"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s %s\n"+
			"üÜî Telegram ID: %d\n"+
			"üíµ –°—É–º–º–∞: %s\n"+
			"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %.2f‚ÇΩ\n"+
			"üè¶ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: %s\n"+
			"üìÖ ID –ø–ª–∞—Ç–µ–∂–∞: %s",
		user.FirstName, user.LastName, paymentInfo.UserID,
		paymentCommon.FormatAmount(paymentInfo.Amount), user.Balance,
		paymentCommon.GetMethodDescription(paymentInfo.Method), paymentInfo.ID)

	msg := tgbotapi.NewMessage(common.ADMIN_ID, notificationText)
	msg.ParseMode = "HTML"

	_, err = common.GlobalBot.Send(msg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: %v", err)
	}

	return nil
}

// sendSuccessResponse –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ webhook
func (wh *WebhookHandlers) sendSuccessResponse(w http.ResponseWriter) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	response := map[string]string{"status": "ok"}
	json.NewEncoder(w).Encode(response)
}

// RegisterWebhookRoutes —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
func RegisterWebhookRoutes(mux *http.ServeMux, paymentManager *PaymentManager) {
	handlers := NewWebhookHandlers(paymentManager)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Æ–ö–∞—Å—Å—ã
	mux.HandleFunc("/yukassa/webhook", handlers.HandleYooKassaWebhook)

	log.Printf("WEBHOOK_ROUTES: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã –≤–µ–±-—Ö—É–∫–æ–≤:")
	log.Printf("WEBHOOK_ROUTES: - POST /yukassa/webhook - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –Æ–ö–∞—Å—Å—ã")
}

// HandleCheckPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
func (wh *WebhookHandlers) HandleCheckPayment(paymentID string, chatID int64, messageID int) error {
	log.Printf("WEBHOOK_CHECK: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ %s", paymentID)

	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API –Æ–ö–∞—Å—Å—ã
	paymentInfo, err := wh.paymentManager.CheckPaymentStatus(paymentCommon.PaymentMethodAPI, paymentID)
	if err != nil {
		log.Printf("WEBHOOK_CHECK: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ %s: %v", paymentID, err)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞\n\nüÜî ID: %s\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", paymentID))

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", fmt.Sprintf("check_payment:%s", paymentID)),
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "main"),
			),
		)
		editMsg.ReplyMarkup = &keyboard

		if _, err := common.GlobalBot.Send(editMsg); err != nil {
			log.Printf("WEBHOOK_CHECK: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: %v", err)
		}
		return err
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
	var text string
	var keyboard *tgbotapi.InlineKeyboardMarkup

	switch paymentInfo.Status {
	case paymentCommon.PaymentStatusSucceeded:
		// –ò–∑–≤–ª–µ–∫–∞–µ–º userID –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
		userID := paymentInfo.UserID
		if userID == 0 {
			if userIDValue, exists := paymentInfo.Metadata["user_id"]; exists {
				switch v := userIDValue.(type) {
				case float64:
					userID = int64(v)
				case int64:
					userID = v
				case int:
					userID = int64(v)
				case string:
					fmt.Sscanf(v, "%d", &userID)
				}
			}
		}

		if userID == 0 {
			log.Printf("WEBHOOK_CHECK: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å UserID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ %s", paymentID)
			text = fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\nüÜî ID: %s\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", paymentID)
		} else {
			// –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã
			user, err := common.GetUserByTelegramID(userID)
			if err != nil {
				log.Printf("WEBHOOK_CHECK: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
				text = fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\nüÜî ID: %s\n\n–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", paymentID)
			} else {
				// –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
				err = common.AddBalance(userID, paymentInfo.Amount)
				if err != nil {
					log.Printf("WEBHOOK_CHECK: –û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ %s: %v", paymentID, err)
					text = fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤</b>\n\nüÜî ID: %s\n\n–û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –±–∞–ª–∞–Ω—Å.", paymentID)
				} else {
					// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					user, err = common.GetUserByTelegramID(userID)
					if err != nil {
						log.Printf("WEBHOOK_CHECK: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
						text = fmt.Sprintf("‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\nüí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: %s\nüÜî ID: %s", paymentCommon.FormatAmount(paymentInfo.Amount), paymentID)
					} else {
						text = fmt.Sprintf("‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"+
							"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: %s\n"+
							"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %.2f‚ÇΩ\n"+
							"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: %s\n\n"+
							"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!",
							paymentCommon.FormatAmount(paymentInfo.Amount), user.Balance, paymentID)

						log.Printf("WEBHOOK_CHECK: –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ %s, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d, –±–∞–ª–∞–Ω—Å: %.2f‚ÇΩ", paymentID, userID, user.Balance)
					}
				}
			}
		}

		keyboardButtons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "main"),
			),
		)
		keyboard = &keyboardButtons

	case paymentCommon.PaymentStatusPending:
		text = fmt.Sprintf("‚è≥ <b>–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è</b>\n\n"+
			"üí∞ –°—É–º–º–∞: %s\n"+
			"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: %s\n\n"+
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
			paymentCommon.FormatAmount(paymentInfo.Amount), paymentInfo.ID)

		keyboardButtons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", fmt.Sprintf("check_payment:%s", paymentID)),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "main"),
			),
		)
		keyboard = &keyboardButtons

	case paymentCommon.PaymentStatusCanceled:
		text = fmt.Sprintf("‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"+
			"üí∞ –°—É–º–º–∞: %s\n"+
			"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: %s",
			paymentCommon.FormatAmount(paymentInfo.Amount), paymentInfo.ID)

		keyboardButtons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí≥ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂", "topup"),
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "main"),
			),
		)
		keyboard = &keyboardButtons

	case paymentCommon.PaymentStatusFailed:
		text = fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"+
			"üí∞ –°—É–º–º–∞: %s\n"+
			"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: %s\n\n"+
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
			paymentCommon.FormatAmount(paymentInfo.Amount), paymentInfo.ID)

		keyboardButtons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí≥ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂", "topup"),
				tgbotapi.NewInlineKeyboardButtonURL("‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", common.SUPPORT_LINK),
			),
		)
		keyboard = &keyboardButtons

	default:
		text = fmt.Sprintf("‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"+
			"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: %s\n\n"+
			"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.",
			paymentInfo.ID)

		keyboardButtons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", common.SUPPORT_LINK),
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "main"),
			),
		)
		keyboard = &keyboardButtons
	}

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	editMsg.ParseMode = "HTML"
	if keyboard != nil {
		editMsg.ReplyMarkup = keyboard
	}

	_, err = common.GlobalBot.Send(editMsg)
	if err != nil {
		log.Printf("WEBHOOK_CHECK: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return err
	}

	log.Printf("WEBHOOK_CHECK: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ %s —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω: %s", paymentID, paymentInfo.Status)
	return nil
}
