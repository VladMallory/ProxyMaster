package telegramPayment

import (
	"fmt"
	"strconv"
	"strings"

	"bot/common"
	paymentCommon "bot/payments/common"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// TelegramPaymentProvider —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Telegram Bot API
type TelegramPaymentProvider struct {
	bot *tgbotapi.BotAPI
}

// NewTelegramPaymentProvider —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä Telegram –ø–ª–∞—Ç–µ–∂–µ–π
func NewTelegramPaymentProvider(bot *tgbotapi.BotAPI) *TelegramPaymentProvider {
	return &TelegramPaymentProvider{
		bot: bot,
	}
}

// IsEnabled –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Telegram
func (t *TelegramPaymentProvider) IsEnabled() bool {
	return common.TELEGRAM_PAYMENTS_ENABLED && common.YUKASSA_PROVIDER_TOKEN != ""
}

// GetMethod –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
func (t *TelegramPaymentProvider) GetMethod() paymentCommon.PaymentMethod {
	return paymentCommon.PaymentMethodTelegram
}

// CreatePayment —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram Bot API
func (t *TelegramPaymentProvider) CreatePayment(userID int64, amount float64, description string) (*paymentCommon.PaymentInfo, error) {
	paymentCommon.LogPaymentEvent("INFO", paymentCommon.PaymentMethodTelegram,
		"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–∞ —Å—É–º–º—É %.2f", userID, amount)

	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
	if err := paymentCommon.ValidateAmount(amount); err != nil {
		return nil, err
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
	paymentID := paymentCommon.GeneratePaymentID()

	// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
	paymentInfo := &paymentCommon.PaymentInfo{
		ID:          paymentID,
		UserID:      userID,
		Amount:      amount,
		Currency:    "RUB",
		Status:      paymentCommon.PaymentStatusPending,
		Method:      paymentCommon.PaymentMethodTelegram,
		Description: paymentCommon.SanitizeDescription(description),
		CreatedAt:   paymentCommon.GetCurrentTimestamp(),
		UpdatedAt:   paymentCommon.GetCurrentTimestamp(),
		Metadata: paymentCommon.CreatePaymentMetadata(userID, map[string]interface{}{
			"payment_id": paymentID,
			"bot_token":  strings.Split(common.YUKASSA_PROVIDER_TOKEN, ":")[0], // –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
		}),
	}

	paymentCommon.LogPaymentEvent("INFO", paymentCommon.PaymentMethodTelegram,
		"–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: ID=%s, UserID=%d, Amount=%.2f", paymentID, userID, amount)

	return paymentInfo, nil
}

// SendInvoice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
func (t *TelegramPaymentProvider) SendInvoice(chatID int64, paymentInfo *paymentCommon.PaymentInfo) error {
	paymentCommon.LogPaymentEvent("INFO", paymentCommon.PaymentMethodTelegram,
		"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ %s –≤ —á–∞—Ç %d", paymentInfo.ID, chatID)

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
	prices := []tgbotapi.LabeledPrice{
		{
			Label:  paymentInfo.Description,
			Amount: paymentCommon.ConvertRublesToKopecks(paymentInfo.Amount),
		},
	}

	// –°–æ–∑–¥–∞–µ–º payload –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
	payload := fmt.Sprintf("topup_%d_%.0f_%s", paymentInfo.UserID, paymentInfo.Amount, paymentInfo.ID)

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
	invoice := tgbotapi.InvoiceConfig{
		BaseChat: tgbotapi.BaseChat{
			ChatID: chatID,
		},
		Title:                     "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
		Description:               paymentInfo.Description,
		Payload:                   payload,
		ProviderToken:             common.YUKASSA_PROVIDER_TOKEN,
		Currency:                  paymentInfo.Currency,
		Prices:                    prices,
		StartParameter:            fmt.Sprintf("topup_%.0f", paymentInfo.Amount),
		PhotoURL:                  "", // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø
		PhotoSize:                 0,
		PhotoWidth:                0,
		PhotoHeight:               0,
		NeedName:                  false, // –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
		NeedPhoneNumber:           false, // –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
		NeedEmail:                 false, // –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email (Telegram —Å–∞–º –ø–µ—Ä–µ–¥–∞—Å—Ç)
		NeedShippingAddress:       false,
		SendPhoneNumberToProvider: false, // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
		SendEmailToProvider:       false, // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
		IsFlexible:                false,
		SuggestedTipAmounts:       []int{},
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
	msg, err := t.bot.Send(invoice)
	if err != nil {
		paymentCommon.LogPaymentEvent("ERROR", paymentCommon.PaymentMethodTelegram,
			"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ %s: %v", paymentInfo.ID, err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞: %v", err)
	}

	paymentCommon.LogPaymentEvent("INFO", paymentCommon.PaymentMethodTelegram,
		"–ò–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ %s, MessageID=%d", paymentInfo.ID, msg.MessageID)

	return nil
}

// GetPayment –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Telegram API)
func (t *TelegramPaymentProvider) GetPayment(paymentID string) (*paymentCommon.PaymentInfo, error) {
	// Telegram Bot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ ID
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
	return nil, fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ Telegram Bot API")
}

// ProcessWebhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Telegram (SuccessfulPayment)
func (t *TelegramPaymentProvider) ProcessWebhook(data []byte) (*paymentCommon.PaymentInfo, error) {
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Telegram Bot API
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ handlers/successful_payment_handler.go
	return nil, fmt.Errorf("webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Telegram Bot API")
}

// ProcessSuccessfulPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç Telegram
func (t *TelegramPaymentProvider) ProcessSuccessfulPayment(payment *tgbotapi.SuccessfulPayment, userID int64) (*paymentCommon.PaymentInfo, error) {
	paymentCommon.LogPaymentEvent("INFO", paymentCommon.PaymentMethodTelegram,
		"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)
	paymentCommon.LogPaymentEvent("DEBUG", paymentCommon.PaymentMethodTelegram,
		"Payload: %s, TotalAmount: %d, Currency: %s", payment.InvoicePayload, payment.TotalAmount, payment.Currency)

	// –ü–∞—Ä—Å–∏–º payload (—Ñ–æ—Ä–º–∞—Ç: topup_userID_amount_paymentID)
	parts := strings.Split(payment.InvoicePayload, "_")
	if len(parts) < 3 {
		return nil, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload: %s", payment.InvoicePayload)
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
	extractedUserIDStr := parts[1]
	amountStr := parts[2]
	var paymentID string
	if len(parts) >= 4 {
		paymentID = parts[3]
	} else {
		paymentID = paymentCommon.GeneratePaymentID()
	}

	extractedUserID, err := strconv.ParseInt(extractedUserIDStr, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ userID –∏–∑ payload: %v", err)
	}

	amount, err := strconv.ParseFloat(amountStr, 64)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É–º–º—ã –∏–∑ payload: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ userID
	if extractedUserID != userID {
		return nil, fmt.Errorf("–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ userID: –æ–∂–∏–¥–∞–ª—Å—è %d, –ø–æ–ª—É—á–µ–Ω %d", extractedUserID, userID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
	expectedAmountKopecks := paymentCommon.ConvertRublesToKopecks(amount)
	if payment.TotalAmount != expectedAmountKopecks {
		return nil, fmt.Errorf("–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã: –æ–∂–∏–¥–∞–ª–æ—Å—å %d –∫–æ–ø–µ–µ–∫, –ø–æ–ª—É—á–µ–Ω–æ %d", expectedAmountKopecks, payment.TotalAmount)
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
	paymentInfo := &paymentCommon.PaymentInfo{
		ID:          paymentID,
		UserID:      userID,
		Amount:      amount,
		Currency:    payment.Currency,
		Status:      paymentCommon.PaymentStatusSucceeded,
		Method:      paymentCommon.PaymentMethodTelegram,
		Description: fmt.Sprintf("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ %.2f‚ÇΩ", amount),
		CreatedAt:   paymentCommon.GetCurrentTimestamp(),
		UpdatedAt:   paymentCommon.GetCurrentTimestamp(),
		Metadata: paymentCommon.CreatePaymentMetadata(userID, map[string]interface{}{
			"telegram_payment_charge_id": payment.TelegramPaymentChargeID,
			"provider_payment_charge_id": payment.ProviderPaymentChargeID,
			"original_payload":           payment.InvoicePayload,
		}),
	}

	paymentCommon.LogPaymentEvent("INFO", paymentCommon.PaymentMethodTelegram,
		"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ID=%s, UserID=%d, Amount=%.2f", paymentID, userID, amount)

	// –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err = common.AddBalance(userID, amount)
	if err != nil {
		paymentCommon.LogPaymentEvent("ERROR", paymentCommon.PaymentMethodTelegram,
			"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: %v", err)
	}

	return paymentInfo, nil
}

// SendPaymentConfirmation –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
func (t *TelegramPaymentProvider) SendPaymentConfirmation(chatID int64, paymentInfo *paymentCommon.PaymentInfo, newBalance float64) error {
	text := fmt.Sprintf("‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"+
		"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: %s\n"+
		"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %.2f‚ÇΩ\n"+
		"üè¶ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: %s\n"+
		"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: %s\n\n"+
		"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.",
		paymentCommon.FormatAmount(paymentInfo.Amount), newBalance,
		paymentCommon.GetMethodDescription(paymentInfo.Method), paymentInfo.ID)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "main"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = &keyboard

	_, err := t.bot.Send(msg)
	if err != nil {
		paymentCommon.LogPaymentEvent("ERROR", paymentCommon.PaymentMethodTelegram,
			"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: %v", err)
		return err
	}

	return nil
}
