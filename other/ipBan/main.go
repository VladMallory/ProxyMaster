package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"
)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ config.go)
const (
	DefaultPanelURL      = "https://domen:123/path/"
	DefaultPanelUser     = "C7QKEuj"
	DefaultPanelPass     = "cXFEwoD"
	DefaultInboundID     = 1
	DefaultAccessLog     = "/usr/local/x-ui/access.log"
	DefaultMaxIPs        = 2
	DefaultCheckInterval = 5 * time.Minute
	DefaultGracePeriod   = 10 * time.Minute
)

func main() {
	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	var (
		panelURL      = flag.String("panel-url", DefaultPanelURL, "URL –ø–∞–Ω–µ–ª–∏ x-ui")
		panelUser     = flag.String("panel-user", DefaultPanelUser, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞–Ω–µ–ª–∏")
		panelPass     = flag.String("panel-pass", DefaultPanelPass, "–ü–∞—Ä–æ–ª—å –ø–∞–Ω–µ–ª–∏")
		inboundID     = flag.Int("inbound-id", DefaultInboundID, "ID inbound")
		accessLog     = flag.String("access-log", DefaultAccessLog, "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É access.log")
		maxIPs        = flag.Int("max-ips", DefaultMaxIPs, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IP –Ω–∞ –∫–æ–Ω—Ñ–∏–≥")
		checkInterval = flag.Duration("check-interval", DefaultCheckInterval, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏")
		gracePeriod   = flag.Duration("grace-period", DefaultGracePeriod, "–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º")
		showStats     = flag.Bool("stats", false, "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—ã–π—Ç–∏")
		showConfigs   = flag.Bool("list-configs", false, "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏ –≤—ã–π—Ç–∏")
		enableEmail   = flag.String("enable", "", "–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ email")
		disableEmail  = flag.String("disable", "", "–û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ email")
	)
	flag.Parse()

	// –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–≥–æ–≤
	analyzer := NewLogAnalyzer(*accessLog)

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
	configManager := NewConfigManager(*panelURL, *panelUser, *panelPass, *inboundID)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
	if *showStats {
		handleShowStats(analyzer, *maxIPs)
		return
	}

	if *showConfigs {
		handleShowConfigs(configManager)
		return
	}

	if *enableEmail != "" {
		handleEnableConfig(configManager, *enableEmail)
		return
	}

	if *disableEmail != "" {
		handleDisableConfig(configManager, *disableEmail)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
	service := NewIPBanService(analyzer, configManager, *maxIPs, *checkInterval, *gracePeriod)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
	if err := service.Start(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: %v", err)
	}

	fmt.Println("üéØ IP Ban —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	<-sigChan
	fmt.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
	service.Stop()
}

// handleShowStats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func handleShowStats(analyzer *LogAnalyzer, maxIPs int) {
	fmt.Println("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ IP –∞–¥—Ä–µ—Å–æ–≤")
	fmt.Println(strings.Repeat("=", 50))

	stats, err := analyzer.AnalyzeLog()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∞: %v", err)
	}

	if len(stats) == 0 {
		fmt.Println("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	suspiciousEmails := analyzer.GetSuspiciousEmails(maxIPs)
	normalEmails := analyzer.GetNormalEmails(maxIPs)

	fmt.Printf("üìà –í—Å–µ–≥–æ email: %d\n", len(stats))
	fmt.Printf("üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö (IP > %d): %d\n", maxIPs, len(suspiciousEmails))
	fmt.Printf("‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö (IP ‚â§ %d): %d\n", maxIPs, len(normalEmails))
	fmt.Println()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	analyzer.PrintStats()
}

// handleShowConfigs –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
func handleShowConfigs(configManager *ConfigManager) {
	fmt.Println("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
	fmt.Println(strings.Repeat("=", 50))

	if err := configManager.ListAllConfigs(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: %v", err)
	}
}

// handleEnableConfig –≤–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥
func handleEnableConfig(configManager *ConfigManager, email string) {
	fmt.Printf("üîì –í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è email: %s\n", email)

	if err := configManager.EnableConfig(email); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: %v", err)
	}

	fmt.Println("‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω")
}

// handleDisableConfig –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥
func handleDisableConfig(configManager *ConfigManager, email string) {
	fmt.Printf("üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è email: %s\n", email)

	if err := configManager.DisableConfig(email); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: %v", err)
	}

	fmt.Println("‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
}

// printUsage –≤—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
func printUsage() {
	fmt.Println("üéØ IP Ban System - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞–º–∏")
	fmt.Println()
	fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
	fmt.Println("  go run . [–æ–ø—Ü–∏–∏]")
	fmt.Println()
	fmt.Println("–û–ø—Ü–∏–∏:")
	fmt.Println("  -panel-url string")
	fmt.Println("        URL –ø–∞–Ω–µ–ª–∏ x-ui (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: " + DefaultPanelURL + ")")
	fmt.Println("  -panel-user string")
	fmt.Println("        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞–Ω–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: " + DefaultPanelUser + ")")
	fmt.Println("  -panel-pass string")
	fmt.Println("        –ü–∞—Ä–æ–ª—å –ø–∞–Ω–µ–ª–∏")
	fmt.Println("  -inbound-id int")
	fmt.Println("        ID inbound (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)")
	fmt.Println("  -access-log string")
	fmt.Println("        –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É access.log (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: " + DefaultAccessLog + ")")
	fmt.Println("  -max-ips int")
	fmt.Println("        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IP –Ω–∞ –∫–æ–Ω—Ñ–∏–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2)")
	fmt.Println("  -check-interval duration")
	fmt.Println("        –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5m)")
	fmt.Println("  -grace-period duration")
	fmt.Println("        –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10m)")
	fmt.Println("  -stats")
	fmt.Println("        –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—ã–π—Ç–∏")
	fmt.Println("  -list-configs")
	fmt.Println("        –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏ –≤—ã–π—Ç–∏")
	fmt.Println("  -enable string")
	fmt.Println("        –í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ email")
	fmt.Println("  -disable string")
	fmt.Println("        –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–æ email")
	fmt.Println()
	fmt.Println("–ü—Ä–∏–º–µ—Ä—ã:")
	fmt.Println("  go run .                                    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞")
	fmt.Println("  go run . -stats                             # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
	fmt.Println("  go run . -list-configs                      # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏")
	fmt.Println("  go run . -enable 123456789                  # –í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥")
	fmt.Println("  go run . -disable 123456789                 # –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥")
	fmt.Println("  go run . -max-ips 3 -check-interval 10m     # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
}
