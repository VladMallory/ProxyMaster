package common

import (
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –Æ–ö–ê–°–°–û–ô –ß–ï–†–ï–ó TELEGRAM BOT API
//
// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –Æ–ö–∞—Å—Å–æ–π —á–µ—Ä–µ–∑ Telegram Bot API.
// –≠—Ç–æ –ù–ï –ø—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –Æ–ö–∞—Å—Å—ã, –∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Telegram.
//
// –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
// 1. –ü–æ–ª—É—á–∞–µ–º YUKASSA_PROVIDER_TOKEN –æ—Ç @BotFather –≤ —Ä–∞–∑–¥–µ–ª–µ Payments
// 2. –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ tgbotapi.InvoiceConfig
// 3. Telegram –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã –Æ–ö–∞—Å—Å—ã
// 4. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SuccessfulPayment
// 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
//
// –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (—Ç–µ—Å—Ç/–ø—Ä–æ–¥) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–∏–ø–æ–º —Ç–æ–∫–µ–Ω–∞ –æ—Ç BotFather:
// - TEST —Ç–æ–∫–µ–Ω—ã: –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
// - LIVE —Ç–æ–∫–µ–Ω—ã: –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π

// TelegramPaymentAPI —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ Telegram Bot API
type TelegramPaymentAPI struct {
	bot *tgbotapi.BotAPI
}

// NewTelegramPaymentAPI —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –ø–ª–∞—Ç–µ–∂–µ–π Telegram
func NewTelegramPaymentAPI(bot *tgbotapi.BotAPI) *TelegramPaymentAPI {
	return &TelegramPaymentAPI{
		bot: bot,
	}
}

// CreateInvoice —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram
func (t *TelegramPaymentAPI) CreateInvoice(chatID int64, userID int64, amount int, description string) error {
	log.Printf("TELEGRAM_PAYMENTS: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–∞ —Å—É–º–º—É %d", userID, amount)

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö (amount –≤ —Ä—É–±–ª—è—Ö * 100)
	prices := []tgbotapi.LabeledPrice{
		{
			Label:  description,
			Amount: amount * 100, // Telegram API —Ç—Ä–µ–±—É–µ—Ç —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
		},
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
	invoice := tgbotapi.InvoiceConfig{
		BaseChat: tgbotapi.BaseChat{
			ChatID: chatID,
		},
		Title:                     "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
		Description:               description,
		Payload:                   fmt.Sprintf("topup_%d_%d", userID, amount), // Payload –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
		ProviderToken:             YUKASSA_PROVIDER_TOKEN,
		Currency:                  "RUB",
		Prices:                    prices,
		StartParameter:            fmt.Sprintf("topup_%d", amount),
		PhotoURL:                  "", // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø
		PhotoSize:                 0,
		PhotoWidth:                0,
		PhotoHeight:               0,
		NeedName:                  false,
		NeedPhoneNumber:           false,
		NeedEmail:                 false,
		NeedShippingAddress:       false,
		SendPhoneNumberToProvider: false,
		SendEmailToProvider:       false,
		IsFlexible:                false,
		SuggestedTipAmounts:       []int{}, // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è —á–∞–µ–≤—ã—Ö
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
	msg, err := t.bot.Send(invoice)
	if err != nil {
		log.Printf("TELEGRAM_PAYMENTS: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: %v", err)
	}

	log.Printf("TELEGRAM_PAYMENTS: –ò–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d, MessageID=%d", userID, msg.MessageID)
	return nil
}

// ProcessSuccessfulPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
func (t *TelegramPaymentAPI) ProcessSuccessfulPayment(payment *tgbotapi.SuccessfulPayment, userID int64) error {
	log.Printf("TELEGRAM_PAYMENTS: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)
	log.Printf("TELEGRAM_PAYMENTS: Payload: %s, TotalAmount: %d, Currency: %s",
		payment.InvoicePayload, payment.TotalAmount, payment.Currency)

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ payload (—Ñ–æ—Ä–º–∞—Ç: topup_userID_amount)
	var extractedUserID, amount int64
	n, err := fmt.Sscanf(payment.InvoicePayload, "topup_%d_%d", &extractedUserID, &amount)
	if err != nil || n != 2 {
		log.Printf("TELEGRAM_PAYMENTS: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ payload: %s, error: %v", payment.InvoicePayload, err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ payload: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userID —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
	if extractedUserID != userID {
		log.Printf("TELEGRAM_PAYMENTS: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ userID: –æ–∂–∏–¥–∞–ª—Å—è %d, –ø–æ–ª—É—á–µ–Ω %d", extractedUserID, userID)
		return fmt.Errorf("–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ userID –≤ –ø–ª–∞—Ç–µ–∂–µ")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
	expectedAmount := amount * 100
	if payment.TotalAmount != int(expectedAmount) {
		log.Printf("TELEGRAM_PAYMENTS: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã: –æ–∂–∏–¥–∞–ª–æ—Å—å %d –∫–æ–ø–µ–µ–∫, –ø–æ–ª—É—á–µ–Ω–æ %d", expectedAmount, payment.TotalAmount)
		return fmt.Errorf("–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞")
	}

	log.Printf("TELEGRAM_PAYMENTS: –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–∞ —Å—É–º–º—É %.2f", userID, float64(amount))

	// –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err = AddBalance(userID, float64(amount))
	if err != nil {
		log.Printf("TELEGRAM_PAYMENTS: –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
	if ADMIN_NOTIFICATIONS_ENABLED && ADMIN_BALANCE_TOPUP_ENABLED {
		user, err := GetUserByTelegramID(userID)
		if err != nil {
			log.Printf("TELEGRAM_PAYMENTS: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
		} else {
			notificationText := fmt.Sprintf(
				"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"+
					"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s %s\n"+
					"üÜî Telegram ID: %d\n"+
					"üíµ –°—É–º–º–∞: %.2f‚ÇΩ\n"+
					"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %.2f‚ÇΩ\n"+
					"üè¶ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –Æ–ö–∞—Å—Å–∞ (Telegram)\n"+
					"üìÖ ID –ø–ª–∞—Ç–µ–∂–∞: %s",
				user.FirstName, user.LastName, userID, float64(amount), user.Balance,
				payment.TelegramPaymentChargeID)

			msg := tgbotapi.NewMessage(ADMIN_ID, notificationText)
			msg.ParseMode = "HTML"
			if _, err := GlobalBot.Send(msg); err != nil {
				log.Printf("TELEGRAM_PAYMENTS: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: %v", err)
			}
		}
	}

	log.Printf("TELEGRAM_PAYMENTS: –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)
	return nil
}

// SendPaymentConfirmation –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
func (t *TelegramPaymentAPI) SendPaymentConfirmation(chatID int64, amount float64, newBalance float64) error {
	text := fmt.Sprintf("‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"+
		"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: %.2f‚ÇΩ\n"+
		"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %.2f‚ÇΩ\n"+
		"üè¶ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –Æ–ö–∞—Å—Å–∞\n\n"+
		"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.",
		amount, newBalance)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "main"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = &keyboard

	_, err := t.bot.Send(msg)
	if err != nil {
		log.Printf("TELEGRAM_PAYMENTS: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: %v", err)
		return err
	}

	return nil
}
