package main

import (
	"database/sql"
	"fmt"
	"log"
	"math/rand"
	"sync"
	"time"

	_ "github.com/lib/pq"
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è PostgreSQL (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
const (
	PG_HOST     = "localhost"
	PG_PORT     = 5432
	PG_USER     = "your_db_user"
	PG_PASSWORD = "your_secure_password"
	PG_DBNAME   = "your_database_name"
)

// User —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
type User struct {
	TelegramID      int64     `json:"telegram_id"`
	Username        string    `json:"username"`
	FirstName       string    `json:"first_name"`
	LastName        string    `json:"last_name"`
	Balance         float64   `json:"balance"`
	TotalPaid       float64   `json:"total_paid"`
	ConfigsCount    int       `json:"configs_count"`
	HasActiveConfig bool      `json:"has_active_config"`
	ClientID        string    `json:"client_id"`
	SubID           string    `json:"sub_id"`
	Email           string    `json:"email"`
	ConfigCreatedAt time.Time `json:"config_created_at"`
	ExpiryTime      int64     `json:"expiry_time"`
	HasUsedTrial    bool      `json:"has_used_trial"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
}

// TrafficConfig —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
type TrafficConfig struct {
	Enabled        bool `json:"enabled"`
	DailyLimitGB   int  `json:"daily_limit_gb"`
	WeeklyLimitGB  int  `json:"weekly_limit_gb"`
	MonthlyLimitGB int  `json:"monthly_limit_gb"`
	LimitGB        int  `json:"limit_gb"`
	ResetDays      int  `json:"reset_days"`
}

// LoadTestConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
type LoadTestConfig struct {
	Duration        time.Duration // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
	ConcurrentUsers int           // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	ReadWeight      int           // –í–µ—Å –æ–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è (1-10)
	WriteWeight     int           // –í–µ—Å –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏ (1-10)
	UpdateWeight    int           // –í–µ—Å –æ–ø–µ—Ä–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (1-10)
}

// LoadTestStats —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
type LoadTestStats struct {
	TotalOperations     int64
	ReadOperations      int64
	WriteOperations     int64
	UpdateOperations    int64
	Errors              int64
	AverageResponseTime time.Duration
	MaxResponseTime     time.Duration
	MinResponseTime     time.Duration
	StartTime           time.Time
	EndTime             time.Time
}

var (
	db         *sql.DB
	stats      LoadTestStats
	statsMutex sync.RWMutex
)

func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
	log.Println("================================================")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	if err := initDatabase(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer db.Close()

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
	config := LoadTestConfig{
		Duration:        5 * time.Minute, // 5 –º–∏–Ω—É—Ç
		ConcurrentUsers: 200,             // 200 –∫–ª–∏–µ–Ω—Ç–æ–≤
		ReadWeight:      5,               // 50% –æ–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è
		WriteWeight:     3,               // 30% –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏
		UpdateWeight:    2,               // 20% –æ–ø–µ—Ä–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	}

	log.Printf("üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞:")
	log.Printf("   - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v", config.Duration)
	log.Printf("   - –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d", config.ConcurrentUsers)
	log.Printf("   - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π: –ß—Ç–µ–Ω–∏–µ=%d, –ó–∞–ø–∏—Å—å=%d, –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ=%d",
		config.ReadWeight, config.WriteWeight, config.UpdateWeight)

	// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
	runLoadTest(config)

	// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	printResults()
}

func initDatabase() error {
	psqlInfo := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",
		PG_HOST, PG_PORT, PG_USER, PG_PASSWORD, PG_DBNAME)

	var err error
	db, err = sql.Open("postgres", psqlInfo)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	if err = db.Ping(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	db.SetMaxOpenConns(50) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
	db.SetMaxIdleConns(10)
	db.SetConnMaxLifetime(10 * time.Minute)

	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	return nil
}

func runLoadTest(config LoadTestConfig) {
	log.Println("üî• –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")

	stats.StartTime = time.Now()

	var wg sync.WaitGroup
	stopChan := make(chan bool)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ "–∫–ª–∏–µ–Ω—Ç–∞"
	for i := 0; i < config.ConcurrentUsers; i++ {
		wg.Add(1)
		go func(clientID int) {
			defer wg.Done()
			simulateClient(clientID, config, stopChan)
		}(i)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
	go func() {
		time.Sleep(config.Duration)
		close(stopChan)
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	wg.Wait()

	stats.EndTime = time.Now()
	log.Println("‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
}

func simulateClient(clientID int, config LoadTestConfig, stopChan <-chan bool) {
	rand.Seed(time.Now().UnixNano() + int64(clientID))

	for {
		select {
		case <-stopChan:
			return
		default:
			// –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
			operation := selectOperation(config)

			// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
			start := time.Now()
			err := performOperation(operation, clientID)
			duration := time.Since(start)

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
			updateStats(operation, duration, err)

			// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
			time.Sleep(time.Duration(rand.Intn(100)+50) * time.Millisecond)
		}
	}
}

func selectOperation(config LoadTestConfig) string {
	totalWeight := config.ReadWeight + config.WriteWeight + config.UpdateWeight
	random := rand.Intn(totalWeight)

	if random < config.ReadWeight {
		return "read"
	} else if random < config.ReadWeight+config.WriteWeight {
		return "write"
	} else {
		return "update"
	}
}

func performOperation(operation string, clientID int) error {
	switch operation {
	case "read":
		return performReadOperation(clientID)
	case "write":
		return performWriteOperation(clientID)
	case "update":
		return performUpdateOperation(clientID)
	default:
		return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: %s", operation)
	}
}

func performReadOperation(clientID int) error {
	// –ß–∏—Ç–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	query := `SELECT telegram_id, username, first_name, last_name, balance, total_paid,
			   configs_count, has_active_config, client_id, sub_id, email,
			   config_created_at, expiry_time, has_used_trial, created_at, updated_at
			   FROM users ORDER BY RANDOM() LIMIT 1`

	var user User
	var configCreatedAt sql.NullTime
	var clientIDStr, subID, email sql.NullString
	var expiryTime sql.NullInt64

	err := db.QueryRow(query).Scan(
		&user.TelegramID, &user.Username, &user.FirstName, &user.LastName,
		&user.Balance, &user.TotalPaid, &user.ConfigsCount, &user.HasActiveConfig,
		&clientIDStr, &subID, &email, &configCreatedAt,
		&expiryTime, &user.HasUsedTrial, &user.CreatedAt, &user.UpdatedAt,
	)

	if err == sql.ErrNoRows {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
		return nil
	}

	return err
}

func performWriteOperation(clientID int) error {
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	telegramID := int64(1000000 + clientID + rand.Intn(10000))
	username := fmt.Sprintf("testuser_%d_%d", clientID, time.Now().Unix())
	firstName := fmt.Sprintf("Test%d", clientID)
	lastName := fmt.Sprintf("User%d", clientID)

	query := `
		INSERT INTO users (telegram_id, username, first_name, last_name, balance, total_paid, 
						   configs_count, has_active_config, has_used_trial, created_at, updated_at)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
		ON CONFLICT (telegram_id) DO NOTHING`

	now := time.Now()
	_, err := db.Exec(query, telegramID, username, firstName, lastName,
		rand.Float64()*1000, rand.Float64()*500, rand.Intn(5),
		rand.Float64() < 0.3, rand.Float64() < 0.5, now, now)

	return err
}

func performUpdateOperation(clientID int) error {
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	query := `UPDATE users SET 
		balance = balance + $1,
		updated_at = $2
		WHERE telegram_id IN (
			SELECT telegram_id FROM users ORDER BY RANDOM() LIMIT 1
		)`

	balanceChange := (rand.Float64() - 0.5) * 100 // -50 –¥–æ +50
	_, err := db.Exec(query, balanceChange, time.Now())

	return err
}

func updateStats(operation string, duration time.Duration, err error) {
	statsMutex.Lock()
	defer statsMutex.Unlock()

	stats.TotalOperations++

	switch operation {
	case "read":
		stats.ReadOperations++
	case "write":
		stats.WriteOperations++
	case "update":
		stats.UpdateOperations++
	}

	if err != nil {
		stats.Errors++
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
	if stats.AverageResponseTime == 0 {
		stats.AverageResponseTime = duration
		stats.MaxResponseTime = duration
		stats.MinResponseTime = duration
	} else {
		// –ü—Ä–æ—Å—Ç–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
		stats.AverageResponseTime = (stats.AverageResponseTime + duration) / 2

		if duration > stats.MaxResponseTime {
			stats.MaxResponseTime = duration
		}
		if duration < stats.MinResponseTime {
			stats.MinResponseTime = duration
		}
	}
}

func printResults() {
	statsMutex.RLock()
	defer statsMutex.RUnlock()

	duration := stats.EndTime.Sub(stats.StartTime)
	opsPerSecond := float64(stats.TotalOperations) / duration.Seconds()
	errorRate := float64(stats.Errors) / float64(stats.TotalOperations) * 100

	log.Println("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
	log.Println("================================================")
	log.Printf("‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: %v", duration)
	log.Printf("üîÑ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: %d", stats.TotalOperations)
	log.Printf("‚ö° –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: %.2f", opsPerSecond)
	log.Printf("üìñ –û–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è: %d (%.1f%%)", stats.ReadOperations,
		float64(stats.ReadOperations)/float64(stats.TotalOperations)*100)
	log.Printf("‚úçÔ∏è  –û–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏: %d (%.1f%%)", stats.WriteOperations,
		float64(stats.WriteOperations)/float64(stats.TotalOperations)*100)
	log.Printf("üîÑ –û–ø–µ—Ä–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %d (%.1f%%)", stats.UpdateOperations,
		float64(stats.UpdateOperations)/float64(stats.TotalOperations)*100)
	log.Printf("‚ùå –û—à–∏–±–æ–∫: %d (%.2f%%)", stats.Errors, errorRate)
	log.Printf("‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %v", stats.AverageResponseTime)
	log.Printf("‚è±Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %v", stats.MaxResponseTime)
	log.Printf("‚è±Ô∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %v", stats.MinResponseTime)

	// –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	log.Println("\nüéØ –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
	log.Println("================================================")

	if opsPerSecond > 1000 {
		log.Println("üü¢ –û–¢–õ–ò–ß–ù–û: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π")
	} else if opsPerSecond > 500 {
		log.Println("üü° –•–û–†–û–®–û: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
	} else if opsPerSecond > 100 {
		log.Println("üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
	} else {
		log.Println("üî¥ –ü–õ–û–•–û: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π")
	}

	if errorRate < 1 {
		log.Println("üü¢ –û–¢–õ–ò–ß–ù–û: –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫")
	} else if errorRate < 5 {
		log.Println("üü° –•–û–†–û–®–û: –ü—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫")
	} else {
		log.Println("üî¥ –ü–õ–û–•–û: –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫")
	}

	log.Println("\n‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
}
