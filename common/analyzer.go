package common

import (
	"bufio"
	"fmt"
	"os"
	"regexp"
	"strings"
	"time"
)

// IPActivity –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ email
type IPActivity struct {
	Email     string
	IPAddress string
	LastSeen  time.Time
	Count     int
}

// EmailIPStats —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ IP –∞–¥—Ä–µ—Å–∞–º –¥–ª—è email
type EmailIPStats struct {
	Email      string
	IPs        map[string]*IPActivity
	TotalIPs   int
	LastUpdate time.Time
}

// LogAnalyzer –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç access.log —Ñ–∞–π–ª
type LogAnalyzer struct {
	LogPath     string
	Stats       map[string]*EmailIPStats
	LastReadPos int64 // –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –±–∞–π—Ç–∞
}

// NewLogAnalyzer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–≥–æ–≤
func NewLogAnalyzer(logPath string) *LogAnalyzer {
	return &LogAnalyzer{
		LogPath:     logPath,
		Stats:       make(map[string]*EmailIPStats),
		LastReadPos: 0,
	}
}

// AnalyzeLog –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ email –∏ IP
func (la *LogAnalyzer) AnalyzeLog() (map[string]*EmailIPStats, error) {
	// –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
	la.CleanupOldData(IP_COUNTER_RETENTION)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ access.log
	accumulatedPath := IP_ACCUMULATED_PATH
	file, err := os.Open(accumulatedPath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ %s: %v", accumulatedPath, err)
	}
	defer file.Close()

	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	fileInfo, err := file.Stat()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: %v", err)
	}

	// –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	if fileInfo.Size() == 0 {
		fmt.Printf("üìÑ –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n")
		return la.Stats, nil
	}

	fmt.Printf("üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º %d –±–∞–π—Ç\n", fileInfo.Size())

	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
	// –§–æ—Ä–º–∞—Ç: 2025/09/04 10:17:03.008517 from 123.123.123.123:52624 accepted tcp:courier.push.apple.com:443 [inbound-443 >> direct] email: 123456789
	logRegex := regexp.MustCompile(`(\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}\.\d+) from (\d+\.\d+\.\d+\.\d+):\d+ accepted.*email: (\d+)`)

	scanner := bufio.NewScanner(file)
	processedLines := 0
	for scanner.Scan() {
		line := scanner.Text()

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
		if len(line) == 0 {
			continue
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å localhost (127.0.0.1) - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã
		if strings.Contains(line, "127.0.0.1") {
			continue
		}

		matches := logRegex.FindStringSubmatch(line)
		if len(matches) != 4 {
			continue
		}

		timestampStr := matches[1]
		ipAddress := matches[2]
		email := matches[3]

		// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
		timestamp, err := time.Parse("2006/01/02 15:04:05.000000", timestampStr)
		if err != nil {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º IP_COUNTER_RETENTION)
		now := time.Now()
		maxAge := time.Duration(IP_COUNTER_RETENTION) * time.Minute
		if maxAge > 0 && timestamp.Before(now.Add(-maxAge)) {
			continue
		}

		processedLines++

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è email –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
		if la.Stats[email] == nil {
			la.Stats[email] = &EmailIPStats{
				Email:      email,
				IPs:        make(map[string]*IPActivity),
				LastUpdate: timestamp,
			}
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è IP –∞–¥—Ä–µ—Å–∞
		if la.Stats[email].IPs[ipAddress] == nil {
			la.Stats[email].IPs[ipAddress] = &IPActivity{
				Email:     email,
				IPAddress: ipAddress,
				LastSeen:  timestamp,
				Count:     1,
			}
		} else {
			la.Stats[email].IPs[ipAddress].Count++
			if timestamp.After(la.Stats[email].IPs[ipAddress].LastSeen) {
				la.Stats[email].IPs[ipAddress].LastSeen = timestamp
			}
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		if timestamp.After(la.Stats[email].LastUpdate) {
			la.Stats[email].LastUpdate = timestamp
		}
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP –¥–ª—è –∫–∞–∂–¥–æ–≥–æ email
	for _, stats := range la.Stats {
		stats.TotalIPs = len(stats.IPs)
	}

	fmt.Printf("üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: %d, –Ω–∞–π–¥–µ–Ω–æ email: %d\n", processedLines, len(la.Stats))

	return la.Stats, scanner.Err()
}

// GetSuspiciousEmails –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç email —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–º–Ω–æ–≥–æ IP)
func (la *LogAnalyzer) GetSuspiciousEmails(maxIPs int) []*EmailIPStats {
	var suspicious []*EmailIPStats

	for _, stats := range la.Stats {
		if stats.TotalIPs > maxIPs {
			suspicious = append(suspicious, stats)
		}
	}

	return suspicious
}

// GetNormalEmails –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç email —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–º–∞–ª–æ IP)
func (la *LogAnalyzer) GetNormalEmails(maxIPs int) []*EmailIPStats {
	var normal []*EmailIPStats

	for _, stats := range la.Stats {
		if stats.TotalIPs <= maxIPs {
			normal = append(normal, stats)
		}
	}

	return normal
}

// PrintStats –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
func (la *LogAnalyzer) PrintStats() {
	fmt.Println("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IP –∞–¥—Ä–µ—Å–æ–≤ –ø–æ email ===")
	for _, stats := range la.Stats {
		fmt.Printf("Email: %s, IP –∞–¥—Ä–µ—Å–æ–≤: %d\n", stats.Email, stats.TotalIPs)
		for ip, activity := range stats.IPs {
			fmt.Printf("  - %s (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: %s, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d)\n",
				ip,
				activity.LastSeen.Format("2006-01-02 15:04:05"),
				activity.Count)
		}
		fmt.Println()
	}
}

// GetEmailIPs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ email
func (la *LogAnalyzer) GetEmailIPs(email string) []string {
	if stats, exists := la.Stats[email]; exists {
		var ips []string
		for ip := range stats.IPs {
			ips = append(ips, ip)
		}
		return ips
	}
	return nil
}

// CleanupOldData –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
func (la *LogAnalyzer) CleanupOldData(retentionMinutes int) {
	if retentionMinutes <= 0 {
		return // –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è = 0, –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
	}

	cutoffTime := time.Now().Add(-time.Duration(retentionMinutes) * time.Minute)
	fmt.Printf("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª—è—é—Ç—Å—è IP –∞–¥—Ä–µ—Å–∞ —Å—Ç–∞—Ä—à–µ %d –º–∏–Ω—É—Ç\n", retentionMinutes)
	fmt.Printf("üßπ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: %s, –≤—Ä–µ–º—è –æ—Ç—Å–µ—á–µ–Ω–∏—è: %s\n", time.Now().Format("15:04:05"), cutoffTime.Format("15:04:05"))

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ email
	for email, stats := range la.Stats {
		ipsToRemove := make([]string, 0)

		for ip, activity := range stats.IPs {
			diffMinutes := int(time.Since(activity.LastSeen).Minutes())
			fmt.Printf("üßπ IP %s –¥–ª—è %s: –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ %s (%d –º–∏–Ω –Ω–∞–∑–∞–¥), –ª–∏–º–∏—Ç %d –º–∏–Ω\n",
				ip, email,
				activity.LastSeen.Format("15:04:05"),
				diffMinutes,
				retentionMinutes)

			if activity.LastSeen.Before(cutoffTime) {
				ipsToRemove = append(ipsToRemove, ip)
				fmt.Printf("üßπ ‚ùå –£–î–ê–õ–Ø–ï–ú —Å—Ç–∞—Ä—ã–π IP %s (–≤–æ–∑—Ä–∞—Å—Ç %d > %d –º–∏–Ω)\n", ip, diffMinutes, retentionMinutes)
			} else {
				fmt.Printf("üßπ ‚úÖ –û–°–¢–ê–í–õ–Ø–ï–ú —Å–≤–µ–∂–∏–π IP %s (–≤–æ–∑—Ä–∞—Å—Ç %d < %d –º–∏–Ω)\n", ip, diffMinutes, retentionMinutes)
			}
		}

		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ IP –∞–¥—Ä–µ—Å–∞
		for _, ip := range ipsToRemove {
			delete(stats.IPs, ip)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IP
		stats.TotalIPs = len(stats.IPs)

		// –ï—Å–ª–∏ —É email –±–æ–ª—å—à–µ –Ω–µ—Ç IP –∞–¥—Ä–µ—Å–æ–≤, —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
		if stats.TotalIPs == 0 {
			delete(la.Stats, email)
		}
	}

	fmt.Printf("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª–µ–Ω—ã IP –∞–¥—Ä–µ—Å–∞ —Å—Ç–∞—Ä—à–µ %d –º–∏–Ω—É—Ç\n", retentionMinutes)
}

// ResetStats –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func (la *LogAnalyzer) ResetStats() {
	la.Stats = make(map[string]*EmailIPStats)
	fmt.Println("üîÑ –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ IP –∞–¥—Ä–µ—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã")
}
