package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"bot/common"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleUsersCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /users
func HandleUsersCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_USERS_COMMAND: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /users –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID != common.ADMIN_ID {
		log.Printf("HANDLE_USERS_COMMAND: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_USERS_COMMAND: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ: %v", err)
		}
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	stats, err := common.GetUsersStatistics()
	if err != nil {
		log.Printf("HANDLE_USERS_COMMAND: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err))
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_USERS_COMMAND: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: %v", err)
		}
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
	text := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"+
		"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n"+
		"üí∞ –ü–ª–∞—Ç—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã: %d (%.1f%%)\n"+
		"üÜì –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: %d (%.1f%%)\n"+
		"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: %d (%.1f%%)\n\n"+
		"üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"+
		"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏: %d\n"+
		"‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π: %d\n"+
		"‚Ä¢ –ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π, –Ω–æ –Ω–µ –ø–ª–∞—Ç–∏–ª–∏: %d\n"+
		"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: %.2f‚ÇΩ\n"+
		"‚Ä¢ –ù–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é: %d\n"+
		"‚Ä¢ –ù–æ–≤—ã–µ –∑–∞ –º–µ—Å—è—Ü: %d\n"+
		"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–ª–∞—Ç—è—â–∏—Ö: %.1f%%",
		stats.TotalUsers,
		stats.PayingUsers, float64(stats.PayingUsers)/float64(stats.TotalUsers)*100,
		stats.TrialAvailableUsers, float64(stats.TrialAvailableUsers)/float64(stats.TotalUsers)*100,
		stats.InactiveUsers, float64(stats.InactiveUsers)/float64(stats.TotalUsers)*100,
		stats.ActiveConfigs,
		stats.TrialAvailableUsers,
		stats.TrialUsedUsers,
		stats.TotalRevenue,
		stats.NewThisWeek,
		stats.NewThisMonth,
		stats.ConversionRate)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤", "show_users_list"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = &keyboard
	if _, err := bot.Send(msg); err != nil {
		log.Printf("HANDLE_USERS_COMMAND: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// HandleUsersLimitCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /users50, /users100, /users400 –∏ —Ç.–¥.
func HandleUsersLimitCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_USERS_LIMIT_COMMAND: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã %s –¥–ª—è TelegramID=%d", message.Command(), message.From.ID)

	if message.From.ID != common.ADMIN_ID {
		log.Printf("HANDLE_USERS_LIMIT_COMMAND: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_USERS_LIMIT_COMMAND: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ: %v", err)
		}
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ –∫–æ–º–∞–Ω–¥—ã
	command := message.Command()
	limitStr := strings.TrimPrefix(command, "users")
	limit, err := strconv.Atoi(limitStr)
	if err != nil {
		log.Printf("HANDLE_USERS_LIMIT_COMMAND: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–∏–º–∏—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã %s: %v", command, err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /users50, /users100, /users400 –∏ —Ç.–¥.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_USERS_LIMIT_COMMAND: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: %v", err)
		}
		return
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
	if limit > 5000 {
		limit = 5000
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	users, err := common.GetUsersSorted(limit)
	if err != nil {
		log.Printf("HANDLE_USERS_LIMIT_COMMAND: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err))
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_USERS_LIMIT_COMMAND: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: %v", err)
		}
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	text := fmt.Sprintf("üìä –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (%d –∏–∑ %d):\n\n", len(users), limit)
	text += formatUsersList(users)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_stats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–ª–∞—Ç–∏–ª–∏", "filter_paying"),
			tgbotapi.NewInlineKeyboardButtonData("üÜì –ú–æ–≥—É—Ç –ø—Ä–æ–±–æ–≤–∞—Ç—å", "filter_trial_available"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü—Ä–æ–±–æ–≤–∞–ª–∏", "filter_trial_used"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", "filter_inactive"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = &keyboard
	if _, err := bot.Send(msg); err != nil {
		log.Printf("HANDLE_USERS_LIMIT_COMMAND: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// HandleShowUsersList –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback "show_users_list"
func HandleShowUsersList(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery) {
	log.Printf("HANDLE_SHOW_USERS_LIST: –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è TelegramID=%d", callbackQuery.From.ID)

	// –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–µ—Ä–≤—ã–µ 20)
	users, err := common.GetUsersSorted(20)
	if err != nil {
		log.Printf("HANDLE_SHOW_USERS_LIST: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		text := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		editMsg := tgbotapi.NewEditMessageText(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID, text)
		if _, err := bot.Send(editMsg); err != nil {
			log.Printf("HANDLE_SHOW_USERS_LIST: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: %v", err)
		}
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	text := "üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º):\n\n"
	text += formatUsersList(users)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_stats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–ª–∞—Ç–∏–ª–∏", "filter_paying"),
			tgbotapi.NewInlineKeyboardButtonData("üÜì –ú–æ–≥—É—Ç –ø—Ä–æ–±–æ–≤–∞—Ç—å", "filter_trial_available"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü—Ä–æ–±–æ–≤–∞–ª–∏", "filter_trial_used"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", "filter_inactive"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID, text)
	editMsg.ReplyMarkup = &keyboard
	if _, err := bot.Send(editMsg); err != nil {
		log.Printf("HANDLE_SHOW_USERS_LIST: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callback := tgbotapi.NewCallback(callbackQuery.ID, "")
	if _, err := bot.Request(callback); err != nil {
		log.Printf("HANDLE_SHOW_USERS_LIST: –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
	}
}

// HandleBackToStats –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback "back_to_stats"
func HandleBackToStats(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery) {
	log.Printf("HANDLE_BACK_TO_STATS: –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –¥–ª—è TelegramID=%d", callbackQuery.From.ID)

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	stats, err := common.GetUsersStatistics()
	if err != nil {
		log.Printf("HANDLE_BACK_TO_STATS: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		text := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		editMsg := tgbotapi.NewEditMessageText(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID, text)
		if _, err := bot.Send(editMsg); err != nil {
			log.Printf("HANDLE_BACK_TO_STATS: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: %v", err)
		}
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
	text := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"+
		"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n"+
		"üí∞ –ü–ª–∞—Ç—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã: %d (%.1f%%)\n"+
		"üÜì –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: %d (%.1f%%)\n"+
		"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: %d (%.1f%%)\n\n"+
		"üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"+
		"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏: %d\n"+
		"‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π: %d\n"+
		"‚Ä¢ –ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π, –Ω–æ –Ω–µ –ø–ª–∞—Ç–∏–ª–∏: %d\n"+
		"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: %.2f‚ÇΩ\n"+
		"‚Ä¢ –ù–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é: %d\n"+
		"‚Ä¢ –ù–æ–≤—ã–µ –∑–∞ –º–µ—Å—è—Ü: %d\n"+
		"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–ª–∞—Ç—è—â–∏—Ö: %.1f%%",
		stats.TotalUsers,
		stats.PayingUsers, float64(stats.PayingUsers)/float64(stats.TotalUsers)*100,
		stats.TrialAvailableUsers, float64(stats.TrialAvailableUsers)/float64(stats.TotalUsers)*100,
		stats.InactiveUsers, float64(stats.InactiveUsers)/float64(stats.TotalUsers)*100,
		stats.ActiveConfigs,
		stats.TrialAvailableUsers,
		stats.TrialUsedUsers,
		stats.TotalRevenue,
		stats.NewThisWeek,
		stats.NewThisMonth,
		stats.ConversionRate)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤", "show_users_list"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID, text)
	editMsg.ReplyMarkup = &keyboard
	if _, err := bot.Send(editMsg); err != nil {
		log.Printf("HANDLE_BACK_TO_STATS: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callback := tgbotapi.NewCallback(callbackQuery.ID, "")
	if _, err := bot.Request(callback); err != nil {
		log.Printf("HANDLE_BACK_TO_STATS: –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
	}
}

// HandleFilterCategory –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
func HandleFilterCategory(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery, category string) {
	log.Printf("HANDLE_FILTER_CATEGORY: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '%s' –¥–ª—è TelegramID=%d", category, callbackQuery.From.ID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	users, err := common.GetUsersByCategory(category, 50)
	if err != nil {
		log.Printf("HANDLE_FILTER_CATEGORY: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '%s': %v", category, err)
		text := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		editMsg := tgbotapi.NewEditMessageText(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID, text)
		if _, err := bot.Send(editMsg); err != nil {
			log.Printf("HANDLE_FILTER_CATEGORY: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: %v", err)
		}
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var categoryName string
	switch category {
	case "paying":
		categoryName = "üí∞ –ü–õ–ê–¢–Ø–©–ò–ï –ö–õ–ò–ï–ù–¢–´"
	case "trial_available":
		categoryName = "üÜì –î–û–°–¢–£–ü–ï–ù –ü–†–û–ë–ù–´–ô –ü–ï–†–ò–û–î"
	case "trial_used":
		categoryName = "üîÑ –ü–û–¢–†–ê–¢–ò–õ–ò –ü–†–û–ë–ù–´–ô, –ù–û –ù–ï –ü–õ–ê–¢–ò–õ–ò"
	case "inactive":
		categoryName = "‚ùå –ù–ï–ê–ö–¢–ò–í–ù–´–ï"
	default:
		categoryName = "üìä –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	text := fmt.Sprintf("%s (%d):\n\n", categoryName, len(users))
	text += formatUsersList(users)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_stats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–ª–∞—Ç–∏–ª–∏", "filter_paying"),
			tgbotapi.NewInlineKeyboardButtonData("üÜì –ú–æ–≥—É—Ç –ø—Ä–æ–±–æ–≤–∞—Ç—å", "filter_trial_available"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü—Ä–æ–±–æ–≤–∞–ª–∏", "filter_trial_used"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", "filter_inactive"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID, text)
	editMsg.ReplyMarkup = &keyboard
	if _, err := bot.Send(editMsg); err != nil {
		log.Printf("HANDLE_FILTER_CATEGORY: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callback := tgbotapi.NewCallback(callbackQuery.ID, "")
	if _, err := bot.Request(callback); err != nil {
		log.Printf("HANDLE_FILTER_CATEGORY: –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: %v", err)
	}
}

// formatUsersList —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func formatUsersList(users []common.User) string {
	if len(users) == 0 {
		return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
	}

	var text strings.Builder
	currentCategory := ""
	counter := 1

	for _, user := range users {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var category string
		if user.Balance > 0 || user.TotalPaid > 0 {
			category = "üí∞ –ü–õ–ê–¢–Ø–©–ò–ï –ö–õ–ò–ï–ù–¢–´"
		} else if !user.HasUsedTrial {
			category = "üÜì –î–û–°–¢–£–ü–ï–ù –ü–†–û–ë–ù–´–ô –ü–ï–†–ò–û–î"
		} else if user.HasUsedTrial && !user.HasActiveConfig {
			category = "üîÑ –ü–û–¢–†–ê–¢–ò–õ–ò –ü–†–û–ë–ù–´–ô, –ù–û –ù–ï –ü–õ–ê–¢–ò–õ–ò"
		} else {
			category = "‚ùå –ù–ï–ê–ö–¢–ò–í–ù–´–ï"
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
		if category != currentCategory {
			if currentCategory != "" {
				text.WriteString("\n")
			}
			text.WriteString(fmt.Sprintf("%s:\n", category))
			currentCategory = category
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º username
		username := ""
		if user.Username != "" {
			username = " @" + user.Username
		}

		// –°—Ç–∞—Ç—É—Å—ã
		trialStatus := "‚ùå"
		if !user.HasUsedTrial {
			trialStatus = "‚úÖ"
		}
		configStatus := "‚ùå"
		if user.HasActiveConfig {
			configStatus = "‚úÖ"
		}

		// –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		regDate := user.CreatedAt.Format("02.01.2006")

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		text.WriteString(fmt.Sprintf("%d. %s ID: %d%s - –ü—Ä–æ–±–Ω—ã–π: %s, –ö–æ–Ω—Ñ–∏–≥: %s, –ë–∞–ª–∞–Ω—Å: %.2f‚ÇΩ\n",
			counter, user.FirstName, user.TelegramID, username, trialStatus, configStatus, user.Balance))
		text.WriteString(fmt.Sprintf("   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %s\n", regDate))

		counter++
	}

	return text.String()
}
