package referralLink

import (
	"fmt"
	"log"
	"strings"

	"bot/common"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ReferralHandler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
type ReferralHandler struct {
	service *ReferralService
	bot     *tgbotapi.BotAPI
}

// NewReferralHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
func NewReferralHandler(service *ReferralService, bot *tgbotapi.BotAPI) *ReferralHandler {
	return &ReferralHandler{
		service: service,
		bot:     bot,
	}
}

// HandleRefCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ref
func (rh *ReferralHandler) HandleRefCommand(chatID int64, user *common.User) {
	log.Printf("REFERRAL_HANDLER: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ref –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", user.TelegramID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
	if !common.REFERRAL_SYSTEM_ENABLED {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
		rh.bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
	linkInfo, err := rh.service.GetReferralLinkInfo(user.TelegramID)
	if err != nil {
		log.Printf("REFERRAL_HANDLER: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è %d: %v", user.TelegramID, err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏")
		rh.bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
	stats, err := rh.service.GetReferralStats(user.TelegramID)
	if err != nil {
		log.Printf("REFERRAL_HANDLER: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è %d: %v", user.TelegramID, err)
		stats = &ReferralStats{} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	text := fmt.Sprintf("üéØ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n")
	text += "üí∞ <b>–í–∞—à –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:</b> " + fmt.Sprintf("%.0f", common.REFERRAL_BONUS_AMOUNT) + "‚ÇΩ\n"
	text += "üéÅ <b>–ë–æ–Ω—É—Å –¥–ª—è –¥—Ä—É–≥–∞:</b> " + fmt.Sprintf("%.0f", common.REFERRAL_WELCOME_BONUS) + "‚ÇΩ\n\n"

	text += "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
	text += "üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: " + fmt.Sprintf("%d", stats.TotalReferrals) + "\n"

	text += "üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
	text += "<code>" + linkInfo.ReferralLink + "</code>\n\n"

	text += "üì± <b>–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞:</b>\n"
	text += "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É\n"
	text += "2Ô∏è‚É£ –î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è\n"
	text += "3Ô∏è‚É£ –í—ã –æ–±–∞ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "ref_stats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤", "ref_history"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", "ref_share"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = &keyboard

	if _, err := rh.bot.Send(msg); err != nil {
		log.Printf("REFERRAL_HANDLER: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// HandleRefCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
func (rh *ReferralHandler) HandleRefCallback(chatID int64, userID int64, data string) {
	log.Printf("REFERRAL_HANDLER: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", data, userID)

	user, err := common.GetUserByTelegramID(userID)
	if err != nil {
		log.Printf("REFERRAL_HANDLER: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return
	}

	switch data {
	case "ref_stats":
		rh.handleStatsCallback(chatID, user)
	case "ref_history":
		rh.handleHistoryCallback(chatID, user)
	case "ref_share":
		rh.handleShareCallback(chatID, user)
	default:
		log.Printf("REFERRAL_HANDLER: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: %s", data)
	}
}

// handleStatsCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func (rh *ReferralHandler) handleStatsCallback(chatID int64, user *common.User) {
	stats, err := rh.service.GetReferralStats(user.TelegramID)
	if err != nil {
		log.Printf("REFERRAL_HANDLER: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
		rh.bot.Send(msg)
		return
	}

	text := "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n\n"
	text += "üë• <b>–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> " + fmt.Sprintf("%d", stats.TotalReferrals) + "\n"
	text += "‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:</b> " + fmt.Sprintf("%d", stats.SuccessfulReferrals) + "\n"
	text += "‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏—Ö:</b> " + fmt.Sprintf("%d", stats.PendingReferrals) + "\n"

	text += "üí∞ <b>–ë–æ–Ω—É—Å—ã:</b>\n"
	text += "‚Ä¢ –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: " + fmt.Sprintf("%.0f", common.REFERRAL_BONUS_AMOUNT) + "‚ÇΩ\n"
	text += "‚Ä¢ –î—Ä—É–≥—É –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: " + fmt.Sprintf("%.0f", common.REFERRAL_WELCOME_BONUS) + "‚ÇΩ\n"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "ref_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = &keyboard

	rh.bot.Send(msg)
}

// handleHistoryCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤
func (rh *ReferralHandler) handleHistoryCallback(chatID int64, user *common.User) {
	bonuses, err := rh.service.GetReferralHistory(user.TelegramID, 10)
	if err != nil {
		log.Printf("REFERRAL_HANDLER: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤")
		rh.bot.Send(msg)
		return
	}

	text := "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤</b>\n\n"

	if len(bonuses) == 0 {
		text += "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –±–æ–Ω—É—Å–æ–≤\n"
		text += "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!"
	} else {
		for i, bonus := range bonuses {
			text += fmt.Sprintf("%d. %s: <b>+%.2f‚ÇΩ</b>\n", i+1, bonus.Description, bonus.Amount)
			text += "   üìÖ " + bonus.CreatedAt.Format("02.01.2006 15:04") + "\n\n"
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "ref_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = &keyboard

	rh.bot.Send(msg)
}

// handleShareCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
func (rh *ReferralHandler) handleShareCallback(chatID int64, user *common.User) {
	linkInfo, err := rh.service.GetReferralLinkInfo(user.TelegramID)
	if err != nil {
		log.Printf("REFERRAL_HANDLER: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏")
		rh.bot.Send(msg)
		return
	}

	text := "üîó <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π</b>\n\n"
	text += "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É:\n\n"
	text += "<code>" + linkInfo.ReferralLink + "</code>\n\n"
	text += "üí° <i>–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã!</i>"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "ref_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = &keyboard

	rh.bot.Send(msg)
}

// ProcessReferralStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
func (rh *ReferralHandler) ProcessReferralStart(chatID int64, user *common.User, referralCode string) {
	log.Printf("REFERRAL_HANDLER: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d, –∫–æ–¥: %s", user.TelegramID, referralCode)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º
	referrer, err := rh.service.GetReferrerByCode(referralCode)
	if err != nil {
		log.Printf("REFERRAL_HANDLER: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ –∫–æ–¥—É %s: %v", referralCode, err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Å–∞–º —Å–µ–±—è
	if referrer.TelegramID == user.TelegramID {
		log.Printf("REFERRAL_HANDLER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º —Å–µ–±—è", user.TelegramID)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
	err = rh.service.ProcessReferralTransition(referrer.TelegramID, user.TelegramID, referralCode)
	if err != nil {
		log.Printf("REFERRAL_HANDLER: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞: %v", err)
		return
	}

	// –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã
	err = rh.service.AwardReferralBonuses(referrer.TelegramID, user.TelegramID, referralCode)
	if err != nil {
		log.Printf("REFERRAL_HANDLER: –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É
	text := fmt.Sprintf("üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n")
	text += fmt.Sprintf("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç %s!\n", referrer.FirstName)
	text += fmt.Sprintf("üéÅ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: <b>%.0f‚ÇΩ</b>\n\n", common.REFERRAL_WELCOME_BONUS)
	text += "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É!"

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	rh.bot.Send(msg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
	referrerText := fmt.Sprintf("üéâ <b>–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n")
	referrerText += fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n", user.FirstName)
	referrerText += fmt.Sprintf("üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: <b>%.0f‚ÇΩ</b>\n\n", common.REFERRAL_BONUS_AMOUNT)
	referrerText += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ!"

	referrerMsg := tgbotapi.NewMessage(referrer.TelegramID, referrerText)
	referrerMsg.ParseMode = "HTML"
	rh.bot.Send(referrerMsg)

	log.Printf("REFERRAL_HANDLER: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ %d -> %d", referrer.TelegramID, user.TelegramID)
}

// IsReferralCallback –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º
func (rh *ReferralHandler) IsReferralCallback(data string) bool {
	referralCallbacks := []string{
		"ref_stats", "ref_history", "ref_share", "ref_menu",
	}

	for _, callback := range referralCallbacks {
		if data == callback {
			return true
		}
	}

	return false
}

// IsReferralCommand –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π
func (rh *ReferralHandler) IsReferralCommand(command string) bool {
	return command == "ref"
}

// IsReferralStart –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
func (rh *ReferralHandler) IsReferralStart(text string) bool {
	return strings.HasPrefix(text, "/start ref_")
}

// ExtractReferralCode –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
func (rh *ReferralHandler) ExtractReferralCode(text string) string {
	parts := strings.Fields(text)
	if len(parts) >= 2 && parts[0] == "/start" && strings.HasPrefix(parts[1], "ref_") {
		return parts[1]
	}
	return ""
}
