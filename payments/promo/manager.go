package promo

import (
	"fmt"
	"log"
	"strings"
	"time"

	"bot/common"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// PromoManager –≥–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
type PromoManager struct {
	adminHandler *AdminPromoHandler
	userHandler  *UserPromoHandler
	service      *PromoService
}

// GlobalPromoManager –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
var GlobalPromoManager *PromoManager

// InitializePromoManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
func InitializePromoManager() error {
	log.Printf("PROMO_MANAGER: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
	service, err := NewPromoService()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	adminHandler, err := NewAdminPromoHandler()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–¥–º–∏–Ω–∞: %v", err)
	}

	userHandler, err := NewUserPromoHandler()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	manager := &PromoManager{
		adminHandler: adminHandler,
		userHandler:  userHandler,
		service:      service,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
	GlobalPromoManager = manager

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
	go manager.startCleanupRoutine()

	log.Printf("PROMO_MANAGER: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	return nil
}

// HandleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
func (pm *PromoManager) HandleCommand(chatID int64, userID int64, command string, args []string) error {
	switch command {
	case "promoset":
		return pm.adminHandler.HandlePromoSetCommand(chatID, userID)
	case "promo":
		return pm.userHandler.HandlePromoCommand(chatID, userID, args)
	case "promohistory":
		return pm.userHandler.HandlePromoHistoryCommand(chatID, userID)
	default:
		return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: %s", command)
	}
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä
func (pm *PromoManager) HandleCallback(chatID int64, userID int64, callbackData string) error {
	if strings.HasPrefix(callbackData, "promo_amount:") {
		return pm.adminHandler.HandlePromoSetCallback(chatID, userID, callbackData)
	}

	switch callbackData {
	case "promo_stats":
		return pm.adminHandler.HandlePromoStatsCallback(chatID, userID)
	case "create_promo":
		return pm.adminHandler.HandlePromoSetCommand(chatID, userID)
	case "promo_custom":
		return pm.adminHandler.HandleCustomAmountCallback(chatID, userID)
	}

	if strings.HasPrefix(callbackData, "copy_promo:") {
		return pm.adminHandler.HandleCopyPromoCallback(chatID, userID, callbackData)
	}

	return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: %s", callbackData)
}

// IsPromoCommand –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–∞–Ω–¥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
func (pm *PromoManager) IsPromoCommand(command string) bool {
	promoCommands := []string{"promoset", "promo", "promohistory"}

	for _, promoCmd := range promoCommands {
		if command == promoCmd {
			return true
		}
	}

	return false
}

// IsPromoCallback –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
func (pm *PromoManager) IsPromoCallback(callbackData string) bool {
	promoCallbacks := []string{
		"promo_amount:",
		"promo_stats",
		"create_promo",
		"promo_custom",
		"copy_promo:",
	}

	for _, promoCallback := range promoCallbacks {
		if strings.HasPrefix(callbackData, promoCallback) {
			return true
		}
	}

	return false
}

// GetPromoStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
func (pm *PromoManager) GetPromoStats(adminID int64) (map[string]interface{}, error) {
	return pm.service.GetPromoStats(adminID)
}

// CleanupExpiredPromos –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
func (pm *PromoManager) CleanupExpiredPromos() error {
	return pm.service.CleanupExpiredPromos()
}

// startCleanupRoutine –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
func (pm *PromoManager) startCleanupRoutine() {
	log.Printf("PROMO_MANAGER: –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")

	// –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
	ticker := time.NewTicker(24 * time.Hour)

	for {
		select {
		case <-ticker.C:
			if err := pm.CleanupExpiredPromos(); err != nil {
				log.Printf("PROMO_MANAGER: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: %v", err)
			}
		}
	}
}

// SendPromoNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
func (pm *PromoManager) SendPromoNotification(chatID int64, promo *PromoCode) error {
	text := fmt.Sprintf("üéÅ <b>–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\n"+
		"üí∞ <b>–°—É–º–º–∞:</b> %.2f‚ÇΩ\n"+
		"‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> %s\n\n"+
		"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"+
		"<code>/promo %s</code>",
		promo.Amount,
		promo.ExpiresAt.Format("02.01.2006 15:04"),
		promo.Code)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	_, err := common.GlobalBot.Send(msg)
	return err
}

// ValidatePromoCode –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞ –±–µ–∑ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
func (pm *PromoManager) ValidatePromoCode(code string, userID int64) (*PromoCode, PromoCodeStatus, error) {
	return pm.service.ValidatePromoCode(code, userID)
}

// GetService –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
func (pm *PromoManager) GetService() *PromoService {
	return pm.service
}
