package services

import (
	"log"
	"time"

	"bot/common"
	"bot/payments"
	paymentCommon "bot/payments/common"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// PaymentMonitorService –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ
type PaymentMonitorService struct {
	paymentManager *payments.PaymentManager
	ticker         *time.Ticker
	interval       time.Duration
}

// NewPaymentMonitorService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–µ–π
func NewPaymentMonitorService(paymentManager *payments.PaymentManager) *PaymentMonitorService {
	return &PaymentMonitorService{
		paymentManager: paymentManager,
		interval:       2 * time.Minute, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–µ–π
func (pms *PaymentMonitorService) Start() {
	if pms.paymentManager == nil {
		log.Printf("PAYMENT_MONITOR: –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
		return
	}

	log.Printf("PAYMENT_MONITOR: –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–µ–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: %v)", pms.interval)

	pms.ticker = time.NewTicker(pms.interval)

	go func() {
		// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
		pms.checkPendingPayments()

		// –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
		for range pms.ticker.C {
			pms.checkPendingPayments()
		}
	}()
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–µ–π
func (pms *PaymentMonitorService) Stop() {
	if pms.ticker != nil {
		pms.ticker.Stop()
		log.Printf("PAYMENT_MONITOR: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}
}

// checkPendingPayments –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
func (pms *PaymentMonitorService) checkPendingPayments() {
	log.Printf("PAYMENT_MONITOR: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")

	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
	// –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π

	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
	// –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending" —Å—Ç–∞—Ä—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	log.Printf("PAYMENT_MONITOR: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏)")
}

// ProcessPaymentIfSucceeded –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
func (pms *PaymentMonitorService) ProcessPaymentIfSucceeded(paymentID string, userID int64) error {
	log.Printf("PAYMENT_MONITOR: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", paymentID, userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
	paymentInfo, err := pms.paymentManager.CheckPaymentStatus(paymentCommon.PaymentMethodAPI, paymentID)
	if err != nil {
		log.Printf("PAYMENT_MONITOR: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ %s: %v", paymentID, err)
		return err
	}

	// –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
	if paymentInfo.Status == paymentCommon.PaymentStatusSucceeded {
		log.Printf("PAYMENT_MONITOR: –ü–ª–∞—Ç–µ–∂ %s —É—Å–ø–µ—à–µ–Ω, –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞", paymentID)

		// –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
		err = common.AddBalance(userID, paymentInfo.Amount)
		if err != nil {
			log.Printf("PAYMENT_MONITOR: –û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ %s: %v", paymentID, err)
			return err
		}

		// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user, err := common.GetUserByTelegramID(userID)
		if err != nil {
			log.Printf("PAYMENT_MONITOR: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
			return err
		}

		log.Printf("PAYMENT_MONITOR: –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %.2f‚ÇΩ", userID, user.Balance)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		if common.GlobalBot != nil {
			text := "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n" +
				"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: " + paymentCommon.FormatAmount(paymentInfo.Amount) + "\n" +
				"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: " + paymentCommon.FormatAmount(user.Balance) + "\n" +
				"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: " + paymentInfo.ID + "\n\n" +
				"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!"

			msg := tgbotapi.NewMessage(userID, text)
			msg.ParseMode = "HTML"

			if _, err := common.GlobalBot.Send(msg); err != nil {
				log.Printf("PAYMENT_MONITOR: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
			} else {
				log.Printf("PAYMENT_MONITOR: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID)
			}
		}

		return nil
	}

	log.Printf("PAYMENT_MONITOR: –ü–ª–∞—Ç–µ–∂ %s –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: %s", paymentID, paymentInfo.Status)
	return nil
}
