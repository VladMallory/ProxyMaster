package main

import (
	"fmt"
	"log"
	"time"
)

// IPBanService –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è IP –±–∞–Ω–∞–º–∏
type IPBanService struct {
	Analyzer      *LogAnalyzer
	ConfigManager *ConfigManager
	MaxIPs        int
	CheckInterval time.Duration
	GracePeriod   time.Duration
	Running       bool
	StopChan      chan bool
}

// NewIPBanService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å IP –±–∞–Ω–∞
func NewIPBanService(analyzer *LogAnalyzer, configManager *ConfigManager, maxIPs int, checkInterval, gracePeriod time.Duration) *IPBanService {
	return &IPBanService{
		Analyzer:      analyzer,
		ConfigManager: configManager,
		MaxIPs:        maxIPs,
		CheckInterval: checkInterval,
		GracePeriod:   gracePeriod,
		Running:       false,
		StopChan:      make(chan bool, 1),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (s *IPBanService) Start() error {
	if s.Running {
		return fmt.Errorf("—Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	s.Running = true
	log.Printf("–ó–∞–ø—É—Å–∫ IP Ban —Å–µ—Ä–≤–∏—Å–∞")
	log.Printf("–ú–∞–∫—Å–∏–º—É–º IP –Ω–∞ –∫–æ–Ω—Ñ–∏–≥: %d", s.MaxIPs)
	log.Printf("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: %v", s.CheckInterval)
	log.Printf("–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è: %v", s.GracePeriod)

	go s.monitorLoop()
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (s *IPBanService) Stop() {
	if !s.Running {
		return
	}

	log.Printf("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ IP Ban —Å–µ—Ä–≤–∏—Å–∞")
	s.Running = false
	s.StopChan <- true
}

// monitorLoop –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (s *IPBanService) monitorLoop() {
	ticker := time.NewTicker(s.CheckInterval)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			s.performCheck()
		case <-s.StopChan:
			log.Printf("IP Ban —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// performCheck –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
func (s *IPBanService) performCheck() {
	log.Printf("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP ban")

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥ —Ñ–∞–π–ª
	stats, err := s.Analyzer.AnalyzeLog()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∞: %v", err)
		return
	}

	if len(stats) == 0 {
		fmt.Println("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ (–º–Ω–æ–≥–æ IP)
	suspiciousEmails := s.Analyzer.GetSuspiciousEmails(s.MaxIPs)
	log.Printf("–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: %d", len(suspiciousEmails))

	// –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
	for _, stats := range suspiciousEmails {
		s.handleSuspiciousConfig(stats)
	}

	// –ù–∞—Ö–æ–¥–∏–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ (–º–∞–ª–æ IP)
	normalEmails := s.Analyzer.GetNormalEmails(s.MaxIPs)
	log.Printf("–ù–∞–π–¥–µ–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: %d", len(normalEmails))

	// –í–∫–ª—é—á–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
	for _, stats := range normalEmails {
		s.handleNormalConfig(stats)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	log.Printf("IP_BAN: –í—Å–µ–≥–æ email: %d, –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: %d, –ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö: %d", len(stats), len(suspiciousEmails), len(normalEmails))

	log.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ IP ban –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}

// handleSuspiciousConfig –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
func (s *IPBanService) handleSuspiciousConfig(stats *EmailIPStats) {
	log.Printf("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: %s (IP –∞–¥—Ä–µ—Å–æ–≤: %d)", stats.Email, stats.TotalIPs)

	// –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	var ips []string
	for ip, activity := range stats.IPs {
		ips = append(ips, ip)
		log.Printf("IP %s: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π %d, –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ %s",
			ip, activity.Count, activity.LastSeen.Format("15:04:05"))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥–∞
	currentStatus, err := s.ConfigManager.GetConfigStatus(stats.Email)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥–∞ %s: %v", stats.Email, err)
		return
	}

	// –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	if !currentStatus {
		log.Printf("–ö–æ–Ω—Ñ–∏–≥ %s —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω", stats.Email)
		return
	}

	// –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
	log.Printf("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ %s...", stats.Email)
	if err := s.ConfigManager.DisableConfig(stats.Email); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ %s: %v", stats.Email, err)
	} else {
		log.Printf("IP_BAN: –í–ö–õ–Æ–ß–ï–ù –∫–æ–Ω—Ñ–∏–≥ %s (IP –∞–¥—Ä–µ—Å–æ–≤ %d, IP: %v)", stats.Email, stats.TotalIPs, ips)
	}
}

// handleNormalConfig –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
func (s *IPBanService) handleNormalConfig(stats *EmailIPStats) {
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ —Å 0 IP (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
	if stats.TotalIPs == 0 {
		return
	}

	log.Printf("–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: %s (IP –∞–¥—Ä–µ—Å–æ–≤: %d)", stats.Email, stats.TotalIPs)

	// –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	var ips []string
	for ip := range stats.IPs {
		ips = append(ips, ip)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥–∞
	currentStatus, err := s.ConfigManager.GetConfigStatus(stats.Email)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥–∞ %s: %v", stats.Email, err)
		return
	}

	// –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤–∫–ª—é—á–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	if currentStatus {
		log.Printf("–ö–æ–Ω—Ñ–∏–≥ %s —É–∂–µ –≤–∫–ª—é—á–µ–Ω", stats.Email)
		return
	}

	// –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
	log.Printf("–í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ %s...", stats.Email)
	if err := s.ConfigManager.EnableConfig(stats.Email); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ %s: %v", stats.Email, err)
	} else {
		log.Printf("IP_BAN: –í–ö–õ–Æ–ß–ï–ù –∫–æ–Ω—Ñ–∏–≥ %s (IP –∞–¥—Ä–µ—Å–æ–≤ %d, IP: %v)", stats.Email, stats.TotalIPs, ips)
	}
}

// GetStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
func (s *IPBanService) GetStatus() map[string]interface{} {
	stats, err := s.Analyzer.AnalyzeLog()
	if err != nil {
		return map[string]interface{}{
			"running": s.Running,
			"error":   err.Error(),
		}
	}

	suspiciousCount := len(s.Analyzer.GetSuspiciousEmails(s.MaxIPs))
	normalCount := len(s.Analyzer.GetNormalEmails(s.MaxIPs))

	return map[string]interface{}{
		"running":            s.Running,
		"total_emails":       len(stats),
		"suspicious_count":   suspiciousCount,
		"normal_count":       normalCount,
		"max_ips_per_config": s.MaxIPs,
		"check_interval":     s.CheckInterval.String(),
		"grace_period":       s.GracePeriod.String(),
	}
}

// PrintCurrentStats –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (s *IPBanService) PrintCurrentStats() {
	fmt.Println("\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")

	stats, err := s.Analyzer.AnalyzeLog()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v\n", err)
		return
	}

	if len(stats) == 0 {
		fmt.Println("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
		return
	}

	suspiciousEmails := s.Analyzer.GetSuspiciousEmails(s.MaxIPs)
	normalEmails := s.Analyzer.GetNormalEmails(s.MaxIPs)

	fmt.Printf("üìà –í—Å–µ–≥–æ email: %d\n", len(stats))
	fmt.Printf("üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: %d\n", len(suspiciousEmails))
	fmt.Printf("‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö: %d\n", len(normalEmails))

	fmt.Println("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
	for email, emailStats := range stats {
		status := "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π"
		if emailStats.TotalIPs > s.MaxIPs {
			status = "üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π"
		}

		fmt.Printf("  %s %s: %d IP\n", status, email, emailStats.TotalIPs)
	}
}
