package payments

import (
	"log"
	"time"

	"bot/common"
	paymentCommon "bot/payments/common"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// OnDemandPaymentService –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
type OnDemandPaymentService struct {
	paymentManager *PaymentManager
	paymentLogger  *PaymentLogger
}

// NewOnDemandPaymentService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
func NewOnDemandPaymentService(paymentManager *PaymentManager) *OnDemandPaymentService {
	return &OnDemandPaymentService{
		paymentManager: paymentManager,
		paymentLogger:  NewPaymentLogger(),
	}
}

// StartPaymentMonitoring –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func (odps *OnDemandPaymentService) StartPaymentMonitoring(paymentID string, userID int64, amount float64) {
	log.Printf("PAYMENT_ON_DEMAND: –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", paymentID, userID)

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
	if err := odps.paymentLogger.LogPayment(paymentID, userID, amount, "pending"); err != nil {
		log.Printf("PAYMENT_ON_DEMAND: –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ %s: %v", paymentID, err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go odps.monitorPayment(paymentID, userID)
}

// monitorPayment –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
func (odps *OnDemandPaymentService) monitorPayment(paymentID string, userID int64) {
	log.Printf("PAYMENT_ON_DEMAND: –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ %s", paymentID)

	// –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - 10 –º–∏–Ω—É—Ç
	timeout := time.NewTimer(10 * time.Minute)
	defer timeout.Stop()

	// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
	if odps.checkAndProcessPayment(paymentID, userID) {
		log.Printf("PAYMENT_ON_DEMAND: –ü–ª–∞—Ç–µ–∂ %s –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ", paymentID)
		return
	}

	// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	for {
		select {
		case <-ticker.C:
			if odps.checkAndProcessPayment(paymentID, userID) {
				log.Printf("PAYMENT_ON_DEMAND: –ü–ª–∞—Ç–µ–∂ %s —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", paymentID)
				return
			}

		case <-timeout.C:
			log.Printf("PAYMENT_ON_DEMAND: –¢–∞–π–º–∞—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ %s (10 –º–∏–Ω—É—Ç)", paymentID)
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–≥–µ
			odps.paymentLogger.UpdatePaymentStatus(paymentID, "timeout", false)
			return
		}
	}
}

// checkAndProcessPayment –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –µ—Å–ª–∏ –æ–Ω —É—Å–ø–µ—à–µ–Ω
func (odps *OnDemandPaymentService) checkAndProcessPayment(paymentID string, userID int64) bool {
	if odps.paymentManager == nil {
		log.Printf("PAYMENT_ON_DEMAND: –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
	paymentInfo, err := odps.paymentManager.CheckPaymentStatus(paymentCommon.PaymentMethodAPI, paymentID)
	if err != nil {
		log.Printf("PAYMENT_ON_DEMAND: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ %s: %v", paymentID, err)
		return false
	}

	log.Printf("PAYMENT_ON_DEMAND: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ %s: %s", paymentID, paymentInfo.Status)

	// –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
	if paymentInfo.Status == paymentCommon.PaymentStatusSucceeded {
		log.Printf("PAYMENT_ON_DEMAND: –ü–ª–∞—Ç–µ–∂ %s —É—Å–ø–µ—à–µ–Ω, –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞", paymentID)

		// –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
		err = common.AddBalance(userID, paymentInfo.Amount)
		if err != nil {
			log.Printf("PAYMENT_ON_DEMAND: –û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ %s: %v", paymentID, err)
			odps.paymentLogger.UpdatePaymentStatus(paymentID, "error_balance", false)
			return false
		}

		// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user, err := common.GetUserByTelegramID(userID)
		if err != nil {
			log.Printf("PAYMENT_ON_DEMAND: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–≥–µ
		odps.paymentLogger.UpdatePaymentStatus(paymentID, "succeeded", true)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		if common.GlobalBot != nil {
			text := "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n" +
				"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: " + paymentCommon.FormatAmount(paymentInfo.Amount) + "\n" +
				"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: " + paymentCommon.FormatAmount(user.Balance) + "\n" +
				"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: " + paymentInfo.ID + "\n\n" +
				"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!"

			msg := tgbotapi.NewMessage(userID, text)
			msg.ParseMode = "HTML"

			if _, err := common.GlobalBot.Send(msg); err != nil {
				log.Printf("PAYMENT_ON_DEMAND: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
			} else {
				log.Printf("PAYMENT_ON_DEMAND: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID)
			}
		}

		return true
	}

	// –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
	if paymentInfo.Status == paymentCommon.PaymentStatusCanceled {
		log.Printf("PAYMENT_ON_DEMAND: –ü–ª–∞—Ç–µ–∂ %s –æ—Ç–º–µ–Ω–µ–Ω", paymentID)
		odps.paymentLogger.UpdatePaymentStatus(paymentID, "canceled", true)
		return true
	}

	// –ü–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
	return false
}

// CheckPendingPayments –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
func (odps *OnDemandPaymentService) CheckPendingPayments() {
	pendingPayments, err := odps.paymentLogger.GetPendingPayments()
	if err != nil {
		log.Printf("PAYMENT_ON_DEMAND: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: %v", err)
		return
	}

	if len(pendingPayments) == 0 {
		return
	}

	log.Printf("PAYMENT_ON_DEMAND: –ù–∞–π–¥–µ–Ω–æ %d –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π", len(pendingPayments))

	for _, payment := range pendingPayments {
		log.Printf("PAYMENT_ON_DEMAND: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ %s", payment.PaymentID)
		odps.checkAndProcessPayment(payment.PaymentID, payment.UserID)
	}
}
