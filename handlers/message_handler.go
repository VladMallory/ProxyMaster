package handlers

import (
	"fmt"
	"log"
	"strings"

	"bot/common"
	"bot/menus"
	"bot/payments/promo"
	"bot/referralLink"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func HandleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç TelegramID=%d, –∫–æ–º–∞–Ω–¥–∞='%s'", message.From.ID, message.Command())

	telegramUser := message.From

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	username := ""
	if telegramUser.UserName != "" {
		username = telegramUser.UserName
	}

	firstName := telegramUser.FirstName
	lastName := ""
	if telegramUser.LastName != "" {
		lastName = telegramUser.LastName
	}

	user, err := common.GetOrCreateUser(telegramUser.ID, username, firstName, lastName)
	if err != nil {
		log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º TelegramID=%d: %v", telegramUser.ID, err)
		return
	}
	log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω/—Å–æ–∑–¥–∞–Ω: TelegramID=%d, Username=%s, FirstName=%s, LastName=%s", user.TelegramID, user.Username, user.FirstName, user.LastName)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
	var isReferralUser bool
	if message.IsCommand() && message.Command() == "start" && referralLink.GlobalReferralManager != nil {
		log.Printf("HANDLE_MESSAGE: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start, —Ç–µ–∫—Å—Ç: '%s'", message.Text)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ä—Ç–æ–º
		isReferralStart := referralLink.GlobalReferralManager.IsReferralStart(message.Text)
		log.Printf("HANDLE_MESSAGE: IsReferralStart('%s') = %v", message.Text, isReferralStart)

		if isReferralStart {
			// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
			referralCode := referralLink.GlobalReferralManager.ExtractReferralCode(message.Text)
			log.Printf("HANDLE_MESSAGE: –ò–∑–≤–ª–µ—á–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: '%s'", referralCode)

			if referralCode != "" {
				// –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "ref_" –∏–∑ –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
				cleanCode := strings.TrimPrefix(referralCode, "ref_")
				user.ReferralCode = cleanCode
				isReferralUser = true
				log.Printf("HANDLE_MESSAGE: –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ %s (–æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç %s) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", cleanCode, referralCode, user.TelegramID)

				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
				log.Printf("HANDLE_MESSAGE: –í—ã–∑–æ–≤ HandleStartCommand –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞")
				referralLink.GlobalReferralManager.HandleStartCommand(message.Chat.ID, user, message.Text)

				// –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
				referralMessage := "üéâ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
				referralMessage += "üí∞ <b>–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω—ã –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å!</b>\n"
				referralMessage += "üéÅ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å:</b> " + fmt.Sprintf("%.0f", common.REFERRAL_WELCOME_BONUS) + "‚ÇΩ\n\n"
				referralMessage += "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É!\n"
				referralMessage += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º."

				// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				keyboard := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üí∞ –ë–∞–ª–∞–Ω—Å", "balance"),
						tgbotapi.NewInlineKeyboardButtonData("üîß VPN", "vpn"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "topup"),
						tgbotapi.NewInlineKeyboardButtonData("üéØ –†–µ—Ñ–µ—Ä–∞–ª—ã", "ref"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üì± –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "download_app"),
					),
				)

				msg := tgbotapi.NewMessage(message.Chat.ID, referralMessage)
				msg.ParseMode = "HTML"
				msg.ReplyMarkup = &keyboard

				if _, err := bot.Send(msg); err != nil {
					log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				} else {
					log.Printf("HANDLE_MESSAGE: ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", user.TelegramID)
				}
				return
			} else {
				log.Printf("HANDLE_MESSAGE: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
			}
		} else {
			log.Printf("HANDLE_MESSAGE: –ö–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞")
		}
	} else if message.IsCommand() && message.Command() == "start" {
		log.Printf("HANDLE_MESSAGE: GlobalReferralManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥–∞ /start)
	// –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π (–ù–û –ù–ï —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π)
	if message.IsCommand() && message.Command() == "start" && !user.HasActiveConfig && common.TrialManager.CanUseTrial(user) && !isReferralUser {
		log.Printf("HANDLE_MESSAGE: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é TelegramID=%d", telegramUser.ID)
		common.TrialManager.HandleTrialPeriod(bot, user, message.Chat.ID)
		return
	}

	if message.IsCommand() {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
		log.Printf("HANDLE_MESSAGE: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã: %s, GlobalPromoManager: %v", message.Command(), promo.GlobalPromoManager != nil)
		if promo.GlobalPromoManager != nil {
			log.Printf("HANDLE_MESSAGE: IsPromoCommand(%s): %v", message.Command(), promo.GlobalPromoManager.IsPromoCommand(message.Command()))
			if promo.GlobalPromoManager.IsPromoCommand(message.Command()) {
				log.Printf("HANDLE_MESSAGE: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", message.Command(), message.From.ID)
				args := strings.Fields(message.Text)[1:] // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
				err := promo.GlobalPromoManager.HandleCommand(message.Chat.ID, message.From.ID, message.Command(), args)
				if err != nil {
					log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ %s: %v", message.Command(), err)
				} else {
					log.Printf("HANDLE_MESSAGE: –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ %s —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", message.Command())
				}
				return
			}
		} else {
			log.Printf("HANDLE_MESSAGE: GlobalPromoManager is nil!")
		}

		handleCommand(bot, message, user)
	}
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func handleCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, user *common.User) {
	telegramUser := message.From

	switch message.Command() {
	case "start":
		log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è TelegramID=%d", telegramUser.ID)
		menus.SendMainMenu(bot, message.Chat.ID, user)
	case "balance":
		log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /balance –¥–ª—è TelegramID=%d", telegramUser.ID)
		menus.SendBalance(bot, message.Chat.ID, user)
	case "debug":
		handleDebugCommand(bot, message, user)
	case "backup":
		handleBackupCommand(bot, message)
	case "traffic":
		handleTrafficCommand(bot, message)
	case "trial":
		handleTrialCommand(bot, message)
	case "reset_trial":
		handleResetTrialCommand(bot, message)
	case "users":
		HandleUsersCommand(bot, message)
	case "users10", "users50", "users100", "users200", "users400", "users500", "users1000", "users5000":
		HandleUsersLimitCommand(bot, message)
	case "clear_users":
		handleClearUsersCommand(bot, message)
	case "confirm_clear_users":
		handleConfirmClearUsersCommand(bot, message)
	case "clear_database":
		handleClearDatabaseCommand(bot, message)
	case "confirm_clear_database":
		handleConfirmClearDatabaseCommand(bot, message)
	case "reset_ip_counters":
		handleResetIPCountersCommand(bot, message)
	case "switch_tariff":
		handleSwitchTariffCommand(bot, message)
	case "switch_auto":
		handleSwitchAutoCommand(bot, message)
	case "billing_status":
		handleBillingStatusCommand(bot, message)
	case "ref":
		handleRefCommand(bot, message, user)
	}
}

// handleDebugCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /debug
func handleDebugCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, user *common.User) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /debug –¥–ª—è TelegramID=%d", message.From.ID)

	if user.HasActiveConfig && user.SubID != "" {
		debugText := fmt.Sprintf("üîß Debug Info:\n\n"+
			"SubID: %s\n"+
			"ClientID: %s\n"+
			"Email: %s\n"+
			"Subscription URL: %s%s\n"+
			"JSON URL (old): %s%s",
			user.SubID, user.ClientID, user.Email,
			common.CONFIG_BASE_URL, user.SubID,
			common.CONFIG_JSON_URL, user.SubID)
		msg := tgbotapi.NewMessage(message.Chat.ID, debugText)
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ debug-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ SubID", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üîß –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleBackupCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /backup
func handleBackupCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /backup –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		log.Printf("HANDLE_MESSAGE: –í—ã–∑–æ–≤ BackupMongoDB –¥–ª—è TelegramID=%d", message.From.ID)
		if err := common.BackupMongoDB(); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: %v", err))
			if _, err := bot.Send(msg); err != nil {
				log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –±—ç–∫–∞–ø–∞ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			}
		} else {
			log.Printf("HANDLE_MESSAGE: –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è TelegramID=%d", message.From.ID)
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –±—ç–∫–∞–ø–∞ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			}
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /backup", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleTrafficCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /traffic
func handleTrafficCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /traffic –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		common.ShowTrafficConfig(bot, message.Chat.ID)
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /traffic", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleTrialCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /trial
func handleTrialCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /trial –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		text := common.TrialManager.GetTrialPeriodInfo()
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /trial", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleResetTrialCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /reset_trial
func handleResetTrialCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /reset_trial –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		if err := common.ResetAllTrialFlags(); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: %v", err))
			if _, err := bot.Send(msg); err != nil {
				log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			}
		} else {
			log.Printf("HANDLE_MESSAGE: –ü—Ä–æ–±–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è TelegramID=%d", message.From.ID)
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –ü—Ä–æ–±–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			}
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /reset_trial", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleClearUsersCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /clear_users
func handleClearUsersCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /clear_users –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!\n\n"+
			"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /confirm_clear_users")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /clear_users", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleConfirmClearUsersCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /confirm_clear_users
func handleConfirmClearUsersCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /confirm_clear_users –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		if err := common.ClearAllUsers(); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err))
			if _, err := bot.Send(msg); err != nil {
				log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			}
		} else {
			log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã –¥–ª—è TelegramID=%d", message.From.ID)
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!\n\n"+
				"–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			}
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /confirm_clear_users", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleClearDatabaseCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /clear_database
func handleClearDatabaseCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /clear_database –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!\n\n"+
			"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /confirm_clear_database")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /clear_database", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleConfirmClearDatabaseCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /confirm_clear_database
func handleConfirmClearDatabaseCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /confirm_clear_database –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		if err := common.ClearDatabase(); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err))
			if _, err := bot.Send(msg); err != nil {
				log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			}
		} else {
			log.Printf("HANDLE_MESSAGE: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è TelegramID=%d", message.From.ID)
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!\n\n"+
				"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—É—Å–∫—É.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
			}
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /confirm_clear_database", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleResetIPCountersCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /reset_ip_counters
func handleResetIPCountersCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /reset_ip_counters –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
		analyzer := common.NewLogAnalyzer(common.ACCESS_LOG_PATH)
		analyzer.ResetStats()

		log.Printf("HANDLE_MESSAGE: –°—á–µ—Ç—á–∏–∫–∏ IP –∞–¥—Ä–µ—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è TelegramID=%d", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üîÑ –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ IP –∞–¥—Ä–µ—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã!\n\n"+
			"–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞—á–Ω–µ—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /reset_ip_counters", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleSwitchTariffCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /switch_tariff
func handleSwitchTariffCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /switch_tariff –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		common.SwitchToTariffMode()

		msg := tgbotapi.NewMessage(message.Chat.ID,
			"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n"+
				"üéØ –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω —Ç–∞—Ä–∏—Ñ–Ω—ã–π —Ä–µ–∂–∏–º:\n"+
				"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–∫—É–ø–∞—é—Ç –¥–Ω–∏ –≤—Ä—É—á–Ω—É—é\n"+
				"‚Ä¢ –ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n"+
				"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤\n\n"+
				"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /billing_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /switch_tariff", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleSwitchAutoCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /switch_auto
func handleSwitchAutoCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /switch_auto –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		common.SwitchToAutoBillingMode()

		msg := tgbotapi.NewMessage(message.Chat.ID,
			"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n"+
				"ü§ñ –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è:\n"+
				"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞\n"+
				"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –¥–Ω–µ–π\n"+
				"‚Ä¢ –ö–Ω–æ–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å–∫—Ä—ã—Ç—ã\n\n"+
				"‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞!\n\n"+
				"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /billing_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /switch_auto", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleBillingStatusCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /billing_status
func handleBillingStatusCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /billing_status –¥–ª—è TelegramID=%d", message.From.ID)

	if message.From.ID == common.ADMIN_ID {
		status := common.GetBillingStatus()

		msg := tgbotapi.NewMessage(message.Chat.ID, status)
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	} else {
		log.Printf("HANDLE_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TelegramID=%d –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /billing_status", message.From.ID)
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("HANDLE_MESSAGE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–ª—è TelegramID=%d: %v", message.From.ID, err)
		}
	}
}

// handleRefCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ref
func handleRefCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, user *common.User) {
	log.Printf("HANDLE_MESSAGE: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /ref –¥–ª—è TelegramID=%d", message.From.ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
	if !common.REFERRAL_SYSTEM_ENABLED {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
		bot.Send(msg)
		return
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
	if referralLink.GlobalReferralManager != nil {
		referralLink.GlobalReferralManager.HandleCommand(message.Chat.ID, user, "ref")
	} else {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
		bot.Send(msg)
	}
}
