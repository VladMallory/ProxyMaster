package services

import (
	"encoding/json"
	"fmt"
	"log"
	"strings"
	"time"

	"bot/common"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// AutoBillingService —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤
type AutoBillingService struct {
	bot                 *tgbotapi.BotAPI
	dailyBillingTicker  *time.Ticker
	balanceRecalcTicker *time.Ticker
}

// NewAutoBillingService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è
func NewAutoBillingService(bot *tgbotapi.BotAPI) *AutoBillingService {
	return &AutoBillingService{
		bot: bot,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è
func (abs *AutoBillingService) Start() {
	if !common.AUTO_BILLING_ENABLED {
		log.Printf("AUTO_BILLING: –ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
		return
	}

	if common.TARIFF_MODE_ENABLED {
		log.Printf("AUTO_BILLING: –í–∫–ª—é—á–µ–Ω —Ç–∞—Ä–∏—Ñ–Ω—ã–π —Ä–µ–∂–∏–º, –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
		return
	}

	log.Printf("AUTO_BILLING: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è")

	// –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ—á—å
	abs.startDailyBilling()

	// –ü–µ—Ä–µ—Å—á–µ—Ç –¥–Ω–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
	abs.startBalanceRecalculation()

	log.Printf("AUTO_BILLING: –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è
func (abs *AutoBillingService) Stop() {
	if abs.dailyBillingTicker != nil {
		abs.dailyBillingTicker.Stop()
		log.Printf("AUTO_BILLING: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	}
	if abs.balanceRecalcTicker != nil {
		abs.balanceRecalcTicker.Stop()
		log.Printf("AUTO_BILLING: –ü–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}
}

// startDailyBilling –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
func (abs *AutoBillingService) startDailyBilling() {
	// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ª—É–Ω–æ—á–∏
	now := time.Now()
	nextMidnight := time.Date(now.Year(), now.Month(), now.Day()+1, 0, 0, 0, 0, now.Location())
	timeToMidnight := nextMidnight.Sub(now)

	log.Printf("AUTO_BILLING: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ %v (–≤ –ø–æ–ª–Ω–æ—á—å)", timeToMidnight)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –¥–æ –ø–æ–ª—É–Ω–æ—á–∏
	go func() {
		timer := time.NewTimer(timeToMidnight)
		<-timer.C

		// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
		abs.processDailyBilling()

		// –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π ticker
		abs.dailyBillingTicker = time.NewTicker(24 * time.Hour)
		for range abs.dailyBillingTicker.C {
			abs.processDailyBilling()
		}
	}()
}

// startBalanceRecalculation –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ—Å—á–µ—Ç –¥–Ω–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
func (abs *AutoBillingService) startBalanceRecalculation() {
	interval := time.Duration(common.BALANCE_RECALC_INTERVAL) * time.Minute
	log.Printf("AUTO_BILLING: –ü–µ—Ä–µ—Å—á–µ—Ç –¥–Ω–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É –∫–∞–∂–¥—ã–µ %v", interval)

	abs.balanceRecalcTicker = time.NewTicker(interval)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ä–∞–∑—É
	go abs.processBalanceRecalculation()

	go func() {
		for range abs.balanceRecalcTicker.C {
			abs.processBalanceRecalculation()
		}
	}()
}

// processDailyBilling –≤—ã–ø–æ–ª–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
func (abs *AutoBillingService) processDailyBilling() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ –≤–∫–ª—é—á–µ–Ω–æ
	if !common.AUTO_BILLING_ENABLED || common.TARIFF_MODE_ENABLED {
		log.Printf("AUTO_BILLING: –ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–∞—Ä–∏—Ñ–Ω—ã–π —Ä–µ–∂–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ")
		return
	}

	log.Printf("AUTO_BILLING: –ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è")

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
	users, err := common.GetUsersWithActiveConfigs()
	if err != nil {
		log.Printf("AUTO_BILLING: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return
	}

	billedCount := 0
	disabledCount := 0

	for _, user := range users {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω
		if !common.IsConfigActive(&user) {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
		if user.Balance >= float64(common.PRICE_PER_DAY) {
			// –°–ø–∏—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—É—é –ø–ª–∞—Ç—É
			err := abs.chargeDailyFee(&user)
			if err != nil {
				log.Printf("AUTO_BILLING: –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.TelegramID, err)
				continue
			}
			billedCount++
			log.Printf("AUTO_BILLING: –°–ø–∏—Å–∞–Ω–æ %d‚ÇΩ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d, –æ—Å—Ç–∞—Ç–æ–∫: %.2f‚ÇΩ",
				common.PRICE_PER_DAY, user.TelegramID, user.Balance-float64(common.PRICE_PER_DAY))
		} else {
			// –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ - –æ—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
			err := abs.disableUserConfig(&user)
			if err != nil {
				log.Printf("AUTO_BILLING: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.TelegramID, err)
				continue
			}
			disabledCount++
			log.Printf("AUTO_BILLING: –ö–æ–Ω—Ñ–∏–≥ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: %.2f‚ÇΩ)",
				user.TelegramID, user.Balance)
		}
	}

	log.Printf("AUTO_BILLING: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–ø–∏—Å–∞–Ω–æ: %d, –æ—Ç–∫–ª—é—á–µ–Ω–æ: %d", billedCount, disabledCount)
}

// chargeDailyFee —Å–ø–∏—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é –ø–ª–∞—Ç—É
func (abs *AutoBillingService) chargeDailyFee(user *common.User) error {
	// –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
	user.Balance -= float64(common.PRICE_PER_DAY)

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
	return common.UpdateUser(user)
}

// disableUserConfig –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (abs *AutoBillingService) disableUserConfig(user *common.User) error {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
	user.ExpiryTime = time.Now().UnixMilli()
	user.HasActiveConfig = false

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
	err := common.UpdateUser(user)
	if err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if abs.bot != nil {
		message := "‚ö†Ô∏è <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n" +
			"–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è.\n" +
			"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN.\n\n" +
			"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %.2f‚ÇΩ\n" +
			"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–Ω—è: %d‚ÇΩ\n\n" +
			"–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."

		msg := tgbotapi.NewMessage(user.TelegramID,
			fmt.Sprintf(message, user.Balance, common.PRICE_PER_DAY))
		msg.ParseMode = tgbotapi.ModeHTML

		_, err := abs.bot.Send(msg)
		if err != nil {
			log.Printf("AUTO_BILLING: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", user.TelegramID, err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞
		common.SendConfigBlockingNotificationToAdmin(user)
	}

	return nil
}

// ProcessBalanceRecalculation —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
func (abs *AutoBillingService) ProcessBalanceRecalculation() {
	abs.processBalanceRecalculation()
}

// processBalanceRecalculation –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Å—á–µ—Ç –¥–Ω–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
func (abs *AutoBillingService) processBalanceRecalculation() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ –≤–∫–ª—é—á–µ–Ω–æ
	if !common.AUTO_BILLING_ENABLED || common.TARIFF_MODE_ENABLED {
		log.Printf("AUTO_BILLING: –ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–∞—Ä–∏—Ñ–Ω—ã–π —Ä–µ–∂–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞")
		return
	}

	log.Printf("AUTO_BILLING: –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–Ω–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É")

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	users, err := common.GetAllUsers()
	if err != nil {
		log.Printf("AUTO_BILLING: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞: %v", err)
		return
	}

	recalculatedCount := 0
	now := time.Now()

	for _, user := range users {
		// –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º –±–æ–ª—å—à–µ 0
		if user.Balance <= 0 {
			continue
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
		availableDays := int(user.Balance / float64(common.PRICE_PER_DAY))

		if availableDays <= 0 {
			continue
		}

		// –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
		if !user.HasActiveConfig {
			err := abs.createConfigFromBalance(&user, availableDays)
			if err != nil {
				log.Printf("AUTO_BILLING: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.TelegramID, err)
				continue
			}
			recalculatedCount++
			log.Printf("AUTO_BILLING: –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ %d –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", availableDays, user.TelegramID)
		} else {
			// –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –µ—Å—Ç—å, –≤—Å–µ–≥–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º
			currentExpiryTime := time.UnixMilli(user.ExpiryTime)

			// –í—ã—á–∏—Å–ª—è–µ–º –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
			desiredExpiryTime := now.Add(time.Duration(availableDays) * 24 * time.Hour)

			// –í —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å –±–∞–ª–∞–Ω—Å–æ–º
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 1 —á–∞—Å
			timeDiff := desiredExpiryTime.Sub(currentExpiryTime)
			absDiff := timeDiff
			if absDiff < 0 {
				absDiff = -absDiff
			}

			if absDiff > time.Hour {
				log.Printf("AUTO_BILLING: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", user.TelegramID)
				log.Printf("AUTO_BILLING: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –±–∞–∑–µ: %s, –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è: %s, —Ä–∞–∑–Ω–∏—Ü–∞: %v",
					currentExpiryTime.Format("2006-01-02 15:04"),
					desiredExpiryTime.Format("2006-01-02 15:04"),
					timeDiff)

				// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
				err := abs.updateConfigExpiry(&user, availableDays)
				if err != nil {
					log.Printf("AUTO_BILLING: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.TelegramID, err)
					continue
				}
				recalculatedCount++
				log.Printf("AUTO_BILLING: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ %d –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", availableDays, user.TelegramID)
			} else {
				log.Printf("AUTO_BILLING: –ö–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω (–¥–æ %s, –¥–æ—Å—Ç—É–ø–Ω–æ –¥–Ω–µ–π: %d)",
					user.TelegramID, currentExpiryTime.Format("2006-01-02 15:04"), availableDays)
			}
		}
	}

	log.Printf("AUTO_BILLING: –ü–µ—Ä–µ—Å—á–µ—Ç –¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–æ: %d –∫–æ–Ω—Ñ–∏–≥–æ–≤", recalculatedCount)
}

// createConfigFromBalance —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞
func (abs *AutoBillingService) createConfigFromBalance(user *common.User, days int) error {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
	_, err := common.ProcessPayment(user, days)
	return err
}

// updateConfigExpiry –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞
func (abs *AutoBillingService) updateConfigExpiry(user *common.User, days int) error {
	// –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ –ø–∞–Ω–µ–ª–∏
	sessionCookie, err := common.Login()
	if err != nil {
		log.Printf("AUTO_BILLING: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.TelegramID, err)
		return err
	}

	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏
	err = abs.forceUpdateExpiryTime(sessionCookie, user, days)
	if err != nil {
		log.Printf("AUTO_BILLING: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.TelegramID, err)
		return err
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	return common.UpdateUser(user)
}

// forceUpdateExpiryTime –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏
func (abs *AutoBillingService) forceUpdateExpiryTime(sessionCookie string, user *common.User, days int) error {
	// –ü–æ–ª—É—á–∞–µ–º inbound –∏–∑ –ø–∞–Ω–µ–ª–∏
	inbound, err := common.GetInbound(sessionCookie)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è inbound: %v", err)
	}

	// –ü–∞—Ä—Å–∏–º settings
	var settings common.Settings
	if err := json.Unmarshal([]byte(inbound.Settings), &settings); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ settings: %v", err)
	}

	// –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	clientFound := false
	newExpiryTime := time.Now().Add(time.Duration(days) * 24 * time.Hour).UnixMilli()

	for i, client := range settings.Clients {
		telegramIDStr := fmt.Sprintf("%d", user.TelegramID)
		if strings.HasPrefix(client.Email, telegramIDStr+"_") ||
			strings.HasPrefix(client.Email, telegramIDStr+" ") ||
			client.Email == telegramIDStr {

			log.Printf("AUTO_BILLING: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ %s: %d -> %d",
				client.Email, client.ExpiryTime, newExpiryTime)

			// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
			settings.Clients[i].ExpiryTime = newExpiryTime
			settings.Clients[i].Enable = true
			settings.Clients[i].UpdatedAt = time.Now().UnixMilli()

			// –û–±–Ω–æ–≤–ª—è–µ–º email —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
			if common.SHOW_DATES_IN_CONFIGS {
				expiryDate := time.UnixMilli(newExpiryTime).Format("2006 02 01")
				settings.Clients[i].Email = fmt.Sprintf("%d –¥–æ %s", user.TelegramID, expiryDate)
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			user.ExpiryTime = newExpiryTime
			user.HasActiveConfig = true
			user.Email = settings.Clients[i].Email
			user.UpdatedAt = time.Now()

			clientFound = true
			break
		}
	}

	if !clientFound {
		return fmt.Errorf("–∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏", user.TelegramID)
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
	settingsJSON, err := json.Marshal(settings)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ settings: %v", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º inbound
	inbound.Settings = string(settingsJSON)
	err = common.UpdateInbound(sessionCookie, *inbound)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è inbound: %v", err)
	}

	// ===== –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô FIX –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ö–õ–ò–ï–ù–¢–û–í =====
	// –ü–†–û–ë–õ–ï–ú–ê: –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞–Ω–µ–ª—å 3x-ui –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23 —á–∞—Å–∞),
	// –Ω–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (happ, v2rayTun, etc.) –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18 –¥–Ω–µ–π).
	//
	// –ü–†–ò–ß–ò–ù–ê: –ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è, –Ω–æ –∫–ª–∏–µ–Ω—Ç—ã –∫–µ—à–∏—Ä—É—é—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç
	// —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–∏, –Ω–æ –ù–ï –≤ —Ç–∞—Ä–∏—Ñ–Ω–æ–º —Ä–µ–∂–∏–º–µ.
	//
	// –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–∞—Ä–∏—Ñ–Ω–æ–º —Ä–µ–∂–∏–º–µ (ProcessPayment).
	// ForceResetDepletedStatus –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–≤—É—Ö—Ñ–∞–∑–æ–≤—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:
	// –§–ê–ó–ê A: depleted/exhausted=TRUE + disable client (–ø–∞—É–∑–∞ 1000–º—Å)
	// –§–ê–ó–ê B: depleted/exhausted=FALSE + enable client —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	// –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –í–°–ï –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "—É–≤–∏–¥–µ—Ç—å" –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
	//
	// –†–ï–ó–£–õ–¨–¢–ê–¢: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - –≤—Å–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –≤—Ä–µ–º—è!
	log.Printf("AUTO_BILLING: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è '–∏—Å—á–µ—Ä–ø–∞–Ω–æ' –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ TelegramID=%d", user.TelegramID)
	if err := common.ForceResetDepletedStatus(sessionCookie, user.TelegramID); err != nil {
		log.Printf("AUTO_BILLING: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ '–∏—Å—á–µ—Ä–ø–∞–Ω–æ' –¥–ª—è TelegramID=%d: %v", user.TelegramID, err)
		// –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
	} else {
		log.Printf("AUTO_BILLING: –°–æ—Å—Ç–æ—è–Ω–∏–µ '–∏—Å—á–µ—Ä–ø–∞–Ω–æ' —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è TelegramID=%d - –∫–ª–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤—è—Ç—Å—è", user.TelegramID)
	}

	log.Printf("AUTO_BILLING: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–≤—Ä–µ–º—è+—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–∞ %d –¥–Ω–µ–π (–¥–æ %s) - FIX –∫–∞–∫ –≤ —Ç–∞—Ä–∏—Ñ–∞—Ö",
		user.TelegramID, days, time.UnixMilli(newExpiryTime).Format("2006-01-02 15:04"))

	return nil
}
