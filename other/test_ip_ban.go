package main

import (
	"fmt"
	"log"
	"os"
	"time"

	"bot/common"
)

func main() {
	fmt.Println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã IP –±–∞–Ω–æ–≤")
	fmt.Println("=====================================")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	fmt.Printf("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n")
	fmt.Printf("  IP_BAN_ENABLED: %v\n", common.IP_BAN_ENABLED)
	fmt.Printf("  MAX_IPS_PER_CONFIG: %d\n", common.MAX_IPS_PER_CONFIG)
	fmt.Printf("  ACCESS_LOG_PATH: %s\n", common.ACCESS_LOG_PATH)
	fmt.Printf("  IP_ACCUMULATED_PATH: %s\n", common.IP_ACCUMULATED_PATH)
	fmt.Printf("  IP_SAVE_INTERVAL: %d –º–∏–Ω—É—Ç\n", common.IP_SAVE_INTERVAL)
	fmt.Printf("  IP_CHECK_INTERVAL: %d –º–∏–Ω—É—Ç\n", common.IP_CHECK_INTERVAL)
	fmt.Printf("  IP_COUNTER_RETENTION: %d –º–∏–Ω—É—Ç\n", common.IP_COUNTER_RETENTION)
	fmt.Println()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(common.ACCESS_LOG_PATH); os.IsNotExist(err) {
		fmt.Printf("‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω\n", common.ACCESS_LOG_PATH)
		return
	}
	fmt.Printf("‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª %s –Ω–∞–π–¥–µ–Ω\n", common.ACCESS_LOG_PATH)

	// –°–æ–∑–¥–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –ª–æ–≥–æ–≤
	accumulator := common.NewLogAccumulator(common.ACCESS_LOG_PATH, common.IP_ACCUMULATED_PATH)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –ª–æ–≥–æ–≤
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è –ª–æ–≥–æ–≤...")
	if err := accumulator.Start(); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è –ª–æ–≥–æ–≤: %v", err)
		return
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏
	accumulator.StartCleanupService()
	fmt.Println("‚úÖ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å –ª–æ–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω")

	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
	fmt.Printf("‚è≥ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞...\n")
	accumulator.AccumulateNewLines()

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
	time.Sleep(2 * time.Second)

	// –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
	analyzer := common.NewLogAnalyzer(common.IP_ACCUMULATED_PATH)

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	fmt.Println("üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
	stats, err := analyzer.AnalyzeLog()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: %v", err)
		return
	}

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	fmt.Printf("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n")
	fmt.Printf("  –í—Å–µ–≥–æ email: %d\n", len(stats))

	suspiciousCount := 0
	normalCount := 0

	for email, emailStats := range stats {
		if emailStats.TotalIPs > common.MAX_IPS_PER_CONFIG {
			suspiciousCount++
			fmt.Printf("  üö® %s: %d IP (–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô)\n", email, emailStats.TotalIPs)
		} else {
			normalCount++
			fmt.Printf("  ‚úÖ %s: %d IP (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π)\n", email, emailStats.TotalIPs)
		}
	}

	fmt.Printf("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
	fmt.Printf("  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: %d\n", suspiciousCount)
	fmt.Printf("  –ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö: %d\n", normalCount)

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
	accumulator.Stop()
	fmt.Println("üõë –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å –ª–æ–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
